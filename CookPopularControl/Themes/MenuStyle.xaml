<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:attached="clr-namespace:CookPopularControl.Communal.Attached"
                    xmlns:btn="clr-namespace:CookPopularControl.Controls.Button"
                    xmlns:menu="clr-namespace:CookPopularControl.Controls.Menus"
                    xmlns:panel="clr-namespace:CookPopularControl.Controls.Panels"
                    xmlns:pop="clr-namespace:CookPopularControl.Controls.Popup"
                    xmlns:ripple="clr-namespace:CookPopularControl.Controls.Ripple"
                    xmlns:toolConverters="clr-namespace:CookPopularControl.Tools.Windows.Converters">

    <ContextMenu x:Key="DefaultContextMenu">
        <MenuItem Command="Cut">
            <MenuItem.Icon>
                <Path Data="{DynamicResource CutGeometry}" Fill="{DynamicResource PrimaryForegroundBrush}" Stretch="Uniform" />
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Command="Copy">
            <MenuItem.Icon>
                <Path Data="{DynamicResource CopyGeometry}" Fill="{DynamicResource PrimaryForegroundBrush}" Stretch="Uniform" />
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Command="Paste">
            <MenuItem.Icon>
                <Path Data="{DynamicResource PasteGeometry}" Fill="{DynamicResource PrimaryForegroundBrush}" Stretch="Uniform" />
            </MenuItem.Icon>
        </MenuItem>
        <MenuItem Command="SelectAll">
            <MenuItem.Icon>
                <Path Data="{DynamicResource SelectAllGeometry}" Fill="{DynamicResource PrimaryForegroundBrush}" Stretch="Uniform" />
            </MenuItem.Icon>
        </MenuItem>
    </ContextMenu>

    <Style x:Key="DefaultSeparatorStyle" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource UnEnabledBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="MinHeight" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Height" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Rectangle Fill="{TemplateBinding Background}"
                               Width="{TemplateBinding Width}"
                               Height="{TemplateBinding Height}"
                               HorizontalAlignment="Stretch" VerticalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VerticalSeparatorStyle" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="{DynamicResource UnEnabledBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="MinWidth" Value="1" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Width" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Rectangle Fill="{TemplateBinding Background}"
                               Width="{TemplateBinding Width}"
                               Height="{TemplateBinding Height}"
                               HorizontalAlignment="Center" VerticalAlignment="Stretch" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DefaultMenuItemStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=MenuBase}, Path=Foreground}" />
        <Setter Property="Padding" Value="10,0" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="ripple:RippleAssist.Feedback" Value="#FFFFFF" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Grid ClipToBounds="True">
                        <Border x:Name="TemplateRoot"
                                SnapsToDevicePixels="True"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <Border x:Name="BackgroundRoot"
                                Opacity="0" SnapsToDevicePixels="True"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" />
                        <ripple:Ripple Feedback="{TemplateBinding ripple:RippleAssist.Feedback}"
                                       Focusable="False"
                                       Background="Transparent"
                                       HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                            <Grid Height="{TemplateBinding Height}" Background="Transparent">
                                <Grid Background="Transparent" Margin="{TemplateBinding Padding}" VerticalAlignment="Center">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition SharedSizeGroup="IconGroup" Width="Auto" />
                                        <ColumnDefinition SharedSizeGroup="HeaderGroup" Width="*" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid x:Name="IconWrapper" Visibility="Visible" Margin="10,0">
                                        <ContentPresenter x:Name="Icon"
                                                          ContentSource="Icon"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                          Content="{TemplateBinding Icon}"
                                                          Width="16" Height="16"
                                                          HorizontalAlignment="Left" VerticalAlignment="Center" />
                                    </Grid>
                                    <Grid x:Name="GlyphWrapper" Visibility="Collapsed" Margin="10,0">
                                        <Viewbox x:Name="GlyphPanel"
                                                 FlowDirection="LeftToRight" Visibility="Collapsed"
                                                 Width="16" Height="16"
                                                 HorizontalAlignment="Left" VerticalAlignment="Center">
                                            <Grid Width="24" Height="24">
                                                <Path x:Name="Glyph"
                                                      Data="{DynamicResource CheckGeometry}"
                                                      Fill="{TemplateBinding Foreground}"
                                                      Stretch="Uniform" />
                                            </Grid>
                                        </Viewbox>
                                    </Grid>
                                    <Grid Grid.Column="1">
                                        <ContentPresenter x:Name="BoldHeaderPresenter"
                                                          ContentSource="Header"
                                                          ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                          RecognizesAccessKey="True"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                          TextBlock.FontWeight="Bold"
                                                          TextElement.Foreground="{TemplateBinding Foreground}"
                                                          Visibility="Hidden"
                                                          Content="{TemplateBinding Header}"
                                                          VerticalAlignment="Center" />
                                        <ContentPresenter x:Name="HeaderPresenter"
                                                          ContentSource="Header"
                                                          ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                          RecognizesAccessKey="True"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                          TextElement.Foreground="{TemplateBinding Foreground}"
                                                          Content="{TemplateBinding Header}"
                                                          VerticalAlignment="Center" />
                                    </Grid>
                                    <Grid x:Name="InputGestureTextWrapper" Visibility="Collapsed" Grid.Column="2">
                                        <TextBlock SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                   Visibility="{TemplateBinding InputGestureText,
                                                                                Converter={toolConverters:StringToVisibilityConverter}}"
                                                   Text="{TemplateBinding InputGestureText}"
                                                   Foreground="{TemplateBinding Foreground}"
                                                   Margin="16,0,0,0" HorizontalAlignment="Right" VerticalAlignment="Center" />
                                    </Grid>
                                    <Grid x:Name="SubBlock" Grid.Column="2"
                                          Visibility="Collapsed"
                                          Margin="16,0,0,0">
                                        <Path Data="M0,16 L8,8 L0,0 Z"
                                              Fill="{TemplateBinding Foreground}"
                                              SnapsToDevicePixels="False" Stretch="Uniform"
                                              Width="5" Height="10"
                                              HorizontalAlignment="Right" VerticalAlignment="Center" />
                                    </Grid>
                                </Grid>
                            </Grid>
                        </ripple:Ripple>
                        <Popup x:Name="PART_Popup"
                               AllowsTransparency="True"
                               CacheMode="{DynamicResource DefaultBitmapCache}"
                               Focusable="False"
                               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                               Placement="Bottom" PopupAnimation="Slide" VerticalOffset="0">
                            <Border x:Name="SubMenuBorder"
                                    CornerRadius="2"
                                    Effect="{DynamicResource CustomShadowDepth1}"
                                    Background="{Binding Path=Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=MenuBase}}">
                                <Border Background="Transparent">
                                    <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled" Margin="0,16">
                                            <Canvas Width="0" Height="0"
                                                    HorizontalAlignment="Left" VerticalAlignment="Top">
                                                <Rectangle x:Name="OpaqueRect"
                                                           Fill="{Binding Background, ElementName=SubMenuBorder}"
                                                           Width="{Binding ActualWidth, ElementName=SubMenuBorder}"
                                                           Height="{Binding ActualHeight, ElementName=SubMenuBorder}" />
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter"
                                                            Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter TargetName="SubBlock" Property="Visibility" Value="Visible" />
                            <Setter TargetName="PART_Popup" Property="Placement" Value="Right" />
                            <Setter Property="Height" Value="32" />
                            <Setter TargetName="BoldHeaderPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuItem">
                            <Setter Property="Height" Value="32" />
                            <Setter TargetName="InputGestureTextWrapper" Property="Visibility" Value="Visible" />
                            <Setter TargetName="BoldHeaderPresenter" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Grid.IsSharedSizeScope" Value="True" />
                            <Setter Property="Padding" Value="16,0" />
                            <Setter Property="Height" Value="48" />
                            <Setter TargetName="TemplateRoot" Property="CornerRadius" Value="2" />
                            <Setter TargetName="BackgroundRoot" Property="CornerRadius" Value="2" />
                        </Trigger>
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Padding" Value="16,0" />
                            <Setter Property="Height" Value="48" />
                            <Setter TargetName="TemplateRoot" Property="CornerRadius" Value="2" />
                            <Setter TargetName="BackgroundRoot" Property="CornerRadius" Value="2" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Role" Value="TopLevelHeader" />
                                <Condition Property="IsSubmenuOpen" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="HeaderPresenter" Property="TextBlock.FontWeight" Value="DemiBold" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource BlockBrush}" />
                        </Trigger>
                        <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="True">
                            <Setter TargetName="SubMenuBorder" Property="Margin" Value="5" />
                        </Trigger>
                        <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                            <Setter TargetName="PART_Popup" Property="PopupAnimation" Value="None" />
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="IconWrapper" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsCheckable" Value="True">
                            <Setter TargetName="GlyphWrapper" Property="Visibility" Value="Visible" />
                            <Setter TargetName="IconWrapper" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="BackgroundRoot" Property="Opacity" Value="0.53" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value=".56" />
                        </Trigger>
                        <Trigger SourceName="SubMenuScrollViewer" Property="CanContentScroll" Value="False">
                            <Setter TargetName="OpaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}" />
                            <Setter TargetName="OpaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DefaultMenuBaseStyle" TargetType="{x:Type MenuBase}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryForegroundBrush}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource DefaultMenuItemStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuBase}">
                    <AdornerDecorator CacheMode="{DynamicResource DefaultBitmapCache}">
                        <Border x:Name="Border"
                                SnapsToDevicePixels="True"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}">
                            <StackPanel ClipToBounds="True" IsItemsHost="True" Orientation="Horizontal"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DefaultMenuStyle" TargetType="{x:Type Menu}" BasedOn="{StaticResource DefaultMenuBaseStyle}" />

    <Style x:Key="DefaultContextMenuStyle" TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource DefaultMenuBaseStyle}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryForegroundBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuBase}">
                    <AdornerDecorator CacheMode="{DynamicResource DefaultBitmapCache}">
                        <Grid>
                            <Border CornerRadius="2"
                                    Effect="{DynamicResource CustomShadowDepth1}"
                                    Background="{TemplateBinding Background}"
                                    Margin="5" />
                            <Border Background="Transparent" Margin="5">
                                <ScrollViewer Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                    <panel:SimpleGrid RenderOptions.ClearTypeHint="Enabled" Margin="0,16">
                                        <ItemsPresenter Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </panel:SimpleGrid>
                                </ScrollViewer>
                            </Border>
                        </Grid>
                    </AdornerDecorator>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CircleMenuStyle" TargetType="{x:Type menu:CircleMenu}">
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type menu:CircleMenu}">
                    <ControlTemplate.Resources>
                        <SineEase x:Key="EasingFuctionKey" EasingMode="EaseInOut" />
                        <Storyboard x:Key="VisibleStoryboard">
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MenuItems" Storyboard.TargetProperty="Visibility" Duration="0:0:0.5">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.5" Value="{x:Static Visibility.Visible}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="CollapsedStoryboard">
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetName="MenuItems" Storyboard.TargetProperty="Visibility" Duration="0:0:0.5">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.5" Value="{x:Static Visibility.Collapsed}" />
                            </ObjectAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="TransformToStoryboard" Duration="0:0:0.5">
                            <DoubleAnimation EasingFunction="{StaticResource EasingFuctionKey}"
                                             Storyboard.TargetName="Rotate" Storyboard.TargetProperty="Angle"
                                             To="0" />
                            <DoubleAnimation EasingFunction="{StaticResource EasingFuctionKey}"
                                             Storyboard.TargetName="Scale" Storyboard.TargetProperty="ScaleX"
                                             To="2" />
                            <DoubleAnimation EasingFunction="{StaticResource EasingFuctionKey}"
                                             Storyboard.TargetName="Scale" Storyboard.TargetProperty="ScaleY"
                                             To="2" />
                        </Storyboard>
                        <Storyboard x:Key="TransformFromStoryboard" Duration="0:0:0.5">
                            <DoubleAnimation EasingFunction="{StaticResource EasingFuctionKey}"
                                             Storyboard.TargetName="Rotate" Storyboard.TargetProperty="Angle"
                                             To="-180" />
                            <DoubleAnimation EasingFunction="{StaticResource EasingFuctionKey}"
                                             Storyboard.TargetName="Scale" Storyboard.TargetProperty="ScaleX"
                                             To="0" />
                            <DoubleAnimation EasingFunction="{StaticResource EasingFuctionKey}"
                                             Storyboard.TargetName="Scale" Storyboard.TargetProperty="ScaleY"
                                             To="0" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <panel:SimpleGrid Background="{TemplateBinding Background}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <ToggleButton x:Name="PART_PopupButton"
                                      attached:FrameworkElementBaseAttached.IconHeight="{TemplateBinding Height}"
                                      attached:FrameworkElementBaseAttached.IconWidth="{TemplateBinding Width}"
                                      btn:ToggleButtonAssistant.IsAddCheckedAnimation="True"
                                      btn:ToggleButtonAssistant.OnCheckedGeometry="{DynamicResource MinusGeometry}"
                                      btn:ToggleButtonAssistant.UnCheckedGeometry="{DynamicResource PlusGeometry}"
                                      IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsShowMenu, Mode=TwoWay}"
                                      Style="{DynamicResource ToggleButtonDoubbleTransparentIconStyle}" />
                        <pop:ExtendPopup x:Name="PART_MenuItems"
                                         AllowsTransparency="True"
                                         IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsShowMenu, Mode=TwoWay}"
                                         IsPositionUpdate="True" Placement="Center"
                                         PlacementTarget="{Binding ElementName=PART_PopupButton}"
                                         PopupAnimation="Fade" StaysOpen="False">
                            <Border Effect="{DynamicResource NotifyMessageShadowEffect}" Margin="5">
                                <panel:ArcPanel x:Name="MenuItems"
                                                ArcAngle="{TemplateBinding ArcAngle}"
                                                IsItemRotate="{TemplateBinding IsItemRotate}"
                                                IsItemsHost="True"
                                                Radius="{TemplateBinding Radius}"
                                                RenderTransformOrigin="0.5,0.5" SnapsToDevicePixels="True"
                                                Margin="{TemplateBinding Padding}">
                                    <panel:ArcPanel.RenderTransform>
                                        <TransformGroup>
                                            <RotateTransform x:Name="Rotate" Angle="180" />
                                            <ScaleTransform x:Name="Scale" ScaleX="0" ScaleY="0" />
                                        </TransformGroup>
                                    </panel:ArcPanel.RenderTransform>
                                </panel:ArcPanel>
                            </Border>
                        </pop:ExtendPopup>
                    </panel:SimpleGrid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="PART_PopupButton" Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="VisibleStoryboard" Storyboard="{StaticResource VisibleStoryboard}" />
                                <BeginStoryboard x:Name="TransformToStoryboard" Storyboard="{StaticResource TransformToStoryboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="VisibleStoryboard" />
                                <RemoveStoryboard BeginStoryboardName="TransformToStoryboard" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger SourceName="PART_PopupButton" Property="IsChecked" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="CollapsedStoryboard" Storyboard="{StaticResource CollapsedStoryboard}" />
                                <BeginStoryboard x:Name="TransformFromStoryboard" Storyboard="{StaticResource TransformFromStoryboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="CollapsedStoryboard" />
                                <RemoveStoryboard BeginStoryboardName="TransformFromStoryboard" />
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PopupMenuStyle" TargetType="{x:Type menu:PopupMenu}">
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="50" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="PopupPosition" Value="LeftCenter" />
        <Setter Property="PopupAnimation" Value="Slide" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type menu:PopupMenu}">
                    <panel:SimpleGrid ClipToBounds="False"
                                      Background="{TemplateBinding Background}"
                                      HorizontalAlignment="Center" VerticalAlignment="Center">
                        <ToggleButton x:Name="PART_PopupButton"
                                      attached:FrameworkElementBaseAttached.IconHeight="50" attached:FrameworkElementBaseAttached.IconWidth="50" btn:ToggleButtonAssistant.IsAddCheckedAnimation="True"
                                      btn:ToggleButtonAssistant.OnCheckedGeometry="{DynamicResource MinusGeometry}"
                                      btn:ToggleButtonAssistant.UnCheckedGeometry="{DynamicResource PlusGeometry}"
                                      IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsShowMenu, Mode=TwoWay}"
                                      Style="{DynamicResource ToggleButtonDoubbleTransparentIconStyle}" />
                        <pop:ExtendPopup x:Name="PART_MenuItems"
                                         AllowsTransparency="True"
                                         IsOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsShowMenu, Mode=TwoWay}"
                                         Placement="Left"
                                         PlacementTarget="{Binding ElementName=PART_PopupButton}"
                                         PopupAnimation="{TemplateBinding PopupAnimation}"
                                         StaysOpen="False">
                            <Border Effect="{DynamicResource NotifyMessageShadowEffect}" Margin="5">
                                <StackPanel Focusable="True" IsItemsHost="True" SnapsToDevicePixels="True"
                                            Margin="{TemplateBinding Padding}" />
                            </Border>
                        </pop:ExtendPopup>
                    </panel:SimpleGrid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=PopupPosition}" Value="LeftBottom">
                            <Setter TargetName="PART_MenuItems" Property="HorizontalOffset" Value="18" />
                            <Setter TargetName="PART_MenuItems" Property="VerticalOffset" Value="68" />
                            <Setter TargetName="PART_MenuItems" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="45" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=PopupPosition}" Value="LeftCenter">
                            <Setter TargetName="PART_MenuItems" Property="HorizontalOffset" Value="-10" />
                            <Setter TargetName="PART_MenuItems" Property="VerticalOffset" Value="50" />
                            <Setter TargetName="PART_MenuItems" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=PopupPosition}" Value="LeftTop">
                            <Setter TargetName="PART_MenuItems" Property="HorizontalOffset" Value="-18" />
                            <Setter TargetName="PART_MenuItems" Property="VerticalOffset" Value="18" />
                            <Setter TargetName="PART_MenuItems" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="135" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=PopupPosition}" Value="CenterTop">
                            <Setter TargetName="PART_MenuItems" Property="HorizontalOffset" Value="0" />
                            <Setter TargetName="PART_MenuItems" Property="VerticalOffset" Value="-10" />
                            <Setter TargetName="PART_MenuItems" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=PopupPosition}" Value="RightTop">
                            <Setter TargetName="PART_MenuItems" Property="HorizontalOffset" Value="30" />
                            <Setter TargetName="PART_MenuItems" Property="VerticalOffset" Value="-18" />
                            <Setter TargetName="PART_MenuItems" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="225" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=PopupPosition}" Value="RightCenter">
                            <Setter TargetName="PART_MenuItems" Property="HorizontalOffset" Value="60" />
                            <Setter TargetName="PART_MenuItems" Property="VerticalOffset" Value="0" />
                            <Setter TargetName="PART_MenuItems" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="270" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=PopupPosition}" Value="RightBottom">
                            <Setter TargetName="PART_MenuItems" Property="HorizontalOffset" Value="68" />
                            <Setter TargetName="PART_MenuItems" Property="VerticalOffset" Value="28" />
                            <Setter TargetName="PART_MenuItems" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="315" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=PopupPosition}" Value="CenterBottom">
                            <Setter TargetName="PART_MenuItems" Property="HorizontalOffset" Value="50" />
                            <Setter TargetName="PART_MenuItems" Property="VerticalOffset" Value="60" />
                            <Setter TargetName="PART_MenuItems" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="360" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="{x:Static menu:Spelling.SuggestionMenuItemStyleKey}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource DefaultMenuItemStyle}">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Header" Value="{Binding RelativeSource={RelativeSource Self}, Path=CommandParameter}" />
    </Style>

    <Style x:Key="{x:Static menu:Spelling.IgnoreAllMenuItemStyleKey}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource DefaultMenuItemStyle}">
        <Setter Property="Header" Value="Ignore All" />
    </Style>

    <Style x:Key="{x:Static menu:Spelling.NoSuggestionsMenuItemStyleKey}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource DefaultMenuItemStyle}">
        <Setter Property="Header" Value="(no spelling suggestions)" />
        <Setter Property="IsEnabled" Value="False" />
    </Style>

</ResourceDictionary>