<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:common="clr-namespace:CookPopularControl.Communal"
                    xmlns:pc="clr-namespace:CookPopularControl.Controls">

    <Style x:Key="DefaultExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource AssistantForegroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource PrimaryThemeBrush}" />
        <Setter Property="common:FrameworkElementBaseAttached.CornerRadius" Value="2" />
        <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{DynamicResource DownTriangleGeometry}" />
        <Setter Property="common:FrameworkElementBaseAttached.IconWidth" Value="20" />
        <Setter Property="common:FrameworkElementBaseAttached.IconHeight" Value="20" />
        <Setter Property="pc:ExpanderAssistant.ExpanderHeaderWidth" Value="{DynamicResource DefaultControlHeight}" />
        <Setter Property="pc:ExpanderAssistant.ExpanderHeaderHeight" Value="{DynamicResource DefaultControlHeight}" />
        <Setter Property="pc:ExpanderAssistant.ExpanderHeaderBackground" Value="{DynamicResource PrimaryThemeBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ScaleXStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                             To="1" Duration="0" />
                        </Storyboard>
                        <Storyboard x:Key="ScaleYStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                             To="1" Duration="0" />
                        </Storyboard>
                        <Storyboard x:Key="AngleStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ExpanderButtonRotateTransform"
                                             Storyboard.TargetProperty="(RotateTransform.Angle)"
                                             From="0" To="-90" Duration="0" />
                        </Storyboard>

                        <Storyboard x:Key="DownExpandedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                             From="0" To="1" Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="DownCollapsedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                             From="1" To="0" Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="UpExpandedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                             From="0" To="1" Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="UpCollapsedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                             From="1" To="0" Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="LeftExpandedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                             From="0" To="1" Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="LeftCollapsedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                             From="1" To="0" Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="RightExpandedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                             From="0" To="1" Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="RightCollapsedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                             From="1" To="0" Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="RootBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="{TemplateBinding common:FrameworkElementBaseAttached.CornerRadius}">
                        <DockPanel>
                            <ToggleButton x:Name="ExpanderButton"
                                          Foreground="{TemplateBinding Foreground}"
                                          Background="{TemplateBinding pc:ExpanderAssistant.ExpanderHeaderBackground}"
                                          IsChecked="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsExpanded, Mode=TwoWay}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          Margin="{TemplateBinding Padding}"
                                          common:ButtonBaseAttached.IsShowRipple="True"
                                          common:FrameworkElementBaseAttached.IconHeight="{TemplateBinding common:FrameworkElementBaseAttached.IconHeight}"
                                          common:FrameworkElementBaseAttached.IconWidth="{TemplateBinding common:FrameworkElementBaseAttached.IconWidth}"
                                          Style="{DynamicResource ToggleButtonTransparentIconStyle}">
                                <ToggleButton.Content>
                                    <ContentPresenter Content="{TemplateBinding Header}"
                                                      ContentTemplate="{TemplateBinding ContentTemplate}"
                                                      ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                      ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}">
                                        <ContentPresenter.LayoutTransform>
                                            <RotateTransform x:Name="ExpanderButtonRotateTransform" Angle="0" />
                                        </ContentPresenter.LayoutTransform>
                                    </ContentPresenter>
                                </ToggleButton.Content>
                            </ToggleButton>
                            <ContentPresenter x:Name="ContentPresenter"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                              RecognizesAccessKey="True"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <ContentPresenter.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform x:Name="ContentPresenterScaleTransform" ScaleX="0" ScaleY="0" />
                                    </TransformGroup>
                                </ContentPresenter.LayoutTransform>
                            </ContentPresenter>
                        </DockPanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard Storyboard.TargetName="ExpanderButton" Storyboard.TargetProperty="(ButtonBase.Background).(SolidColorBrush.Color)" Duration="0:0:0.2">
                                        <ColorAnimation To="{DynamicResource ButtonBaseMouseOverColor}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ExpandDirection" Value="Down">
                            <Setter Property="DockPanel.Dock" Value="Top" TargetName="ExpanderButton" />
                            <Setter Property="DockPanel.Dock" Value="Bottom" TargetName="ContentPresenter" />
                            <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualWidth}" TargetName="ExpanderButton" />
                            <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(pc:ExpanderAssistant.ExpanderHeaderHeight)}" TargetName="ExpanderButton" />
                            <Setter Property="Padding" Value="8,0" TargetName="ExpanderButton" />
                            <Setter Property="Margin" Value="8,0" TargetName="ContentPresenter" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" TargetName="ExpanderButton" />
                            <Setter Property="VerticalContentAlignment" Value="Center" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{DynamicResource DownTriangleGeometry}" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconDirection" Value="Right" TargetName="ExpanderButton" />
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ScaleXStoryboard}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" Value="Bottom" TargetName="ExpanderButton" />
                            <Setter Property="DockPanel.Dock" Value="Top" TargetName="ContentPresenter" />
                            <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualWidth}" TargetName="ExpanderButton" />
                            <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(pc:ExpanderAssistant.ExpanderHeaderHeight)}" TargetName="ExpanderButton" />
                            <Setter Property="Padding" Value="8,0" TargetName="ExpanderButton" />
                            <Setter Property="Margin" Value="8,0" TargetName="ContentPresenter" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" TargetName="ExpanderButton" />
                            <Setter Property="VerticalContentAlignment" Value="Center" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{DynamicResource UpTriangleGeometry}" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconDirection" Value="Right" TargetName="ExpanderButton" />
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ScaleXStoryboard}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" Value="Right" TargetName="ExpanderButton" />
                            <Setter Property="DockPanel.Dock" Value="Left" TargetName="ContentPresenter" />
                            <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(pc:ExpanderAssistant.ExpanderHeaderWidth)}" TargetName="ExpanderButton" />
                            <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualHeight}" TargetName="ExpanderButton" />
                            <Setter Property="Padding" Value="0,8" TargetName="ExpanderButton" />
                            <Setter Property="Margin" Value="0,8" TargetName="ContentPresenter" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" TargetName="ExpanderButton" />
                            <Setter Property="VerticalContentAlignment" Value="Stretch" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{DynamicResource LeftTriangleGeometry}" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconDirection" Value="Top" TargetName="ExpanderButton" />
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="AngleStoryboardLeft" Storyboard="{StaticResource AngleStoryboard}" />
                                <BeginStoryboard x:Name="ScaleYStoryboardLeft" Storyboard="{StaticResource ScaleYStoryboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="AngleStoryboardLeft" />
                                <RemoveStoryboard BeginStoryboardName="ScaleYStoryboardLeft" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" Value="Left" TargetName="ExpanderButton" />
                            <Setter Property="DockPanel.Dock" Value="Right" TargetName="ContentPresenter" />
                            <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(pc:ExpanderAssistant.ExpanderHeaderWidth)}" TargetName="ExpanderButton" />
                            <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualHeight}" TargetName="ExpanderButton" />
                            <Setter Property="Padding" Value="0,8" TargetName="ExpanderButton" />
                            <Setter Property="Margin" Value="0,8" TargetName="ContentPresenter" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" TargetName="ExpanderButton" />
                            <Setter Property="VerticalContentAlignment" Value="Stretch" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{DynamicResource RightTriangleGeometry}" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconDirection" Value="Top" TargetName="ExpanderButton" />
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="AngleStoryboardRight" Storyboard="{StaticResource AngleStoryboard}" />
                                <BeginStoryboard x:Name="ScaleYStoryboardRight" Storyboard="{StaticResource ScaleYStoryboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="AngleStoryboardRight" />
                                <RemoveStoryboard BeginStoryboardName="ScaleYStoryboardRight" />
                            </Trigger.ExitActions>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="Down" />
                                <Condition Property="IsExpanded" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="DownExpandedStoryboard" Storyboard="{StaticResource DownExpandedStoryboard}" />
                                <RemoveStoryboard BeginStoryboardName="DownCollapsedStoryboard" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="DownCollapsedStoryboard" Storyboard="{StaticResource DownCollapsedStoryboard}" />
                                <RemoveStoryboard BeginStoryboardName="DownExpandedStoryboard" />
                            </MultiTrigger.ExitActions>
                            <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{DynamicResource UpTriangleGeometry}" TargetName="ExpanderButton" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="Up" />
                                <Condition Property="IsExpanded" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="UpExpandedStoryboard" Storyboard="{StaticResource UpExpandedStoryboard}" />
                                <RemoveStoryboard BeginStoryboardName="UpCollapsedStoryboard" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="UpCollapsedStoryboard" Storyboard="{StaticResource UpCollapsedStoryboard}" />
                                <RemoveStoryboard BeginStoryboardName="UpExpandedStoryboard" />
                            </MultiTrigger.ExitActions>
                            <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{DynamicResource DownTriangleGeometry}" TargetName="ExpanderButton" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="Left" />
                                <Condition Property="IsExpanded" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="LeftExpandedStoryboard" Storyboard="{StaticResource LeftExpandedStoryboard}" />
                                <RemoveStoryboard BeginStoryboardName="LeftCollapsedStoryboard" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="LeftCollapsedStoryboard" Storyboard="{StaticResource LeftCollapsedStoryboard}" />
                                <RemoveStoryboard BeginStoryboardName="LeftExpandedStoryboard" />
                            </MultiTrigger.ExitActions>
                            <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{DynamicResource RightTriangleGeometry}" TargetName="ExpanderButton" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ExpandDirection" Value="Right" />
                                <Condition Property="IsExpanded" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard x:Name="RightExpandedStoryboard" Storyboard="{StaticResource RightExpandedStoryboard}" />
                                <RemoveStoryboard BeginStoryboardName="RightCollapsedStoryboard" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard x:Name="RightCollapsedStoryboard" Storyboard="{StaticResource RightCollapsedStoryboard}" />
                                <RemoveStoryboard BeginStoryboardName="RightExpandedStoryboard" />
                            </MultiTrigger.ExitActions>
                            <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{DynamicResource LeftTriangleGeometry}" TargetName="ExpanderButton" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomExpanderStyle" TargetType="{x:Type Expander}" BasedOn="{StaticResource DefaultExpanderStyle}">
        <Setter Property="pc:ExpanderAssistant.ExpandedGeometry" Value="{DynamicResource MinusGeometry}" />
        <Setter Property="pc:ExpanderAssistant.CollapsedGeometry" Value="{DynamicResource PlusGeometry}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ScaleXStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                             To="1" Duration="0" />
                        </Storyboard>
                        <Storyboard x:Key="ScaleYStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                             To="1" Duration="0" />
                        </Storyboard>
                        <Storyboard x:Key="AngleStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ExpanderButtonRotateTransform"
                                             Storyboard.TargetProperty="(RotateTransform.Angle)"
                                             From="0" To="-90" Duration="0" />
                        </Storyboard>

                        <Storyboard x:Key="ExpandedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                             From="0" To="1" Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                             From="0" To="1" Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="CollapsedStoryboard">
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleX)"
                                             From="1" To="0" Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="ContentPresenterScaleTransform"
                                             Storyboard.TargetProperty="(ScaleTransform.ScaleY)"
                                             From="1" To="0" Duration="0:0:0.2">
                                <DoubleAnimation.EasingFunction>
                                    <CubicEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="RootBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="{TemplateBinding common:FrameworkElementBaseAttached.CornerRadius}">
                        <DockPanel>
                            <ToggleButton x:Name="ExpanderButton"
                                          Foreground="{TemplateBinding Foreground}"
                                          Background="{TemplateBinding pc:ExpanderAssistant.ExpanderHeaderBackground}"
                                          IsChecked="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsExpanded, Mode=TwoWay}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          Margin="{TemplateBinding Padding}"
                                          common:ButtonBaseAttached.IsShowRipple="True"
                                          common:FrameworkElementBaseAttached.IconHeight="{TemplateBinding common:FrameworkElementBaseAttached.IconHeight}"
                                          common:FrameworkElementBaseAttached.IconWidth="{TemplateBinding common:FrameworkElementBaseAttached.IconWidth}"
                                          Style="{DynamicResource ToggleButtonTransparentIconStyle}">
                                <ToggleButton.Content>
                                    <ContentPresenter Content="{TemplateBinding Header}"
                                                      ContentTemplate="{TemplateBinding ContentTemplate}"
                                                      ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                      ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}">
                                        <ContentPresenter.LayoutTransform>
                                            <RotateTransform x:Name="ExpanderButtonRotateTransform" Angle="0" />
                                        </ContentPresenter.LayoutTransform>
                                    </ContentPresenter>
                                </ToggleButton.Content>
                            </ToggleButton>
                            <ContentPresenter x:Name="ContentPresenter"
                                              Content="{TemplateBinding Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                              RecognizesAccessKey="True"
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <ContentPresenter.LayoutTransform>
                                    <TransformGroup>
                                        <ScaleTransform x:Name="ContentPresenterScaleTransform" ScaleX="1" ScaleY="1" />
                                    </TransformGroup>
                                </ContentPresenter.LayoutTransform>
                            </ContentPresenter>
                        </DockPanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard Storyboard.TargetName="ExpanderButton" Storyboard.TargetProperty="(ButtonBase.Background).(SolidColorBrush.Color)" Duration="0:0:0.2">
                                        <ColorAnimation To="{DynamicResource ButtonBaseMouseOverColor}" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ExpandDirection" Value="Down">
                            <Setter Property="DockPanel.Dock" Value="Top" TargetName="ExpanderButton" />
                            <Setter Property="DockPanel.Dock" Value="Bottom" TargetName="ContentPresenter" />
                            <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualWidth}" TargetName="ExpanderButton" />
                            <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(pc:ExpanderAssistant.ExpanderHeaderHeight)}" TargetName="ExpanderButton" />
                            <Setter Property="Padding" Value="8,0" TargetName="ExpanderButton" />
                            <Setter Property="Margin" Value="8,0" TargetName="ContentPresenter" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" TargetName="ExpanderButton" />
                            <Setter Property="VerticalContentAlignment" Value="Center" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{DynamicResource DownTriangleGeometry}" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconDirection" Value="Right" TargetName="ExpanderButton" />
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ScaleXStoryboard}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" Value="Bottom" TargetName="ExpanderButton" />
                            <Setter Property="DockPanel.Dock" Value="Top" TargetName="ContentPresenter" />
                            <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualWidth}" TargetName="ExpanderButton" />
                            <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(pc:ExpanderAssistant.ExpanderHeaderHeight)}" TargetName="ExpanderButton" />
                            <Setter Property="Padding" Value="8,0" TargetName="ExpanderButton" />
                            <Setter Property="Margin" Value="8,0" TargetName="ContentPresenter" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" TargetName="ExpanderButton" />
                            <Setter Property="VerticalContentAlignment" Value="Center" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{DynamicResource UpTriangleGeometry}" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconDirection" Value="Right" TargetName="ExpanderButton" />
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ScaleXStoryboard}" />
                            </Trigger.EnterActions>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" Value="Right" TargetName="ExpanderButton" />
                            <Setter Property="DockPanel.Dock" Value="Left" TargetName="ContentPresenter" />
                            <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(pc:ExpanderAssistant.ExpanderHeaderWidth)}" TargetName="ExpanderButton" />
                            <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualHeight}" TargetName="ExpanderButton" />
                            <Setter Property="Padding" Value="0,8" TargetName="ExpanderButton" />
                            <Setter Property="Margin" Value="0,8" TargetName="ContentPresenter" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" TargetName="ExpanderButton" />
                            <Setter Property="VerticalContentAlignment" Value="Stretch" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{DynamicResource LeftTriangleGeometry}" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconDirection" Value="Top" TargetName="ExpanderButton" />
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="AngleStoryboardLeft" Storyboard="{StaticResource AngleStoryboard}" />
                                <BeginStoryboard x:Name="ScaleYStoryboardLeft" Storyboard="{StaticResource ScaleYStoryboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="AngleStoryboardLeft" />
                                <RemoveStoryboard BeginStoryboardName="ScaleYStoryboardLeft" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" Value="Left" TargetName="ExpanderButton" />
                            <Setter Property="DockPanel.Dock" Value="Right" TargetName="ContentPresenter" />
                            <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(pc:ExpanderAssistant.ExpanderHeaderWidth)}" TargetName="ExpanderButton" />
                            <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualHeight}" TargetName="ExpanderButton" />
                            <Setter Property="Padding" Value="0,8" TargetName="ExpanderButton" />
                            <Setter Property="Margin" Value="0,8" TargetName="ContentPresenter" />
                            <Setter Property="HorizontalContentAlignment" Value="Center" TargetName="ExpanderButton" />
                            <Setter Property="VerticalContentAlignment" Value="Stretch" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{DynamicResource RightTriangleGeometry}" TargetName="ExpanderButton" />
                            <Setter Property="common:FrameworkElementBaseAttached.IconDirection" Value="Top" TargetName="ExpanderButton" />
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="AngleStoryboardRight" Storyboard="{StaticResource AngleStoryboard}" />
                                <BeginStoryboard x:Name="ScaleYStoryboardRight" Storyboard="{StaticResource ScaleYStoryboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="AngleStoryboardRight" />
                                <RemoveStoryboard BeginStoryboardName="ScaleYStoryboardRight" />
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsExpanded" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="ExpandedStoryboard" Storyboard="{StaticResource ExpandedStoryboard}" />
                                <RemoveStoryboard BeginStoryboardName="CollapsedStoryboard" />
                            </Trigger.EnterActions>
                            <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(pc:ExpanderAssistant.ExpandedGeometry)}" TargetName="ExpanderButton" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="CollapsedStoryboard" Storyboard="{StaticResource CollapsedStoryboard}" />
                                <RemoveStoryboard BeginStoryboardName="ExpandedStoryboard" />
                            </Trigger.EnterActions>
                            <Setter Property="common:FrameworkElementBaseAttached.IconGeometry" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(pc:ExpanderAssistant.CollapsedGeometry)}" TargetName="ExpanderButton" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>