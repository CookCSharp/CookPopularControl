<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:attached="clr-namespace:CookPopularControl.Communal"
                    xmlns:commonConverters="clr-namespace:CookPopularControl.Communal.Converters"
                    xmlns:pc="clr-namespace:CookPopularControl.Controls">

    <Style x:Key="DefaultGroupControlBaseStyle" TargetType="{x:Type Control}">
        <Setter Property="attached:FrameworkElementBaseAttached.IconWidth" Value="15" />
        <Setter Property="attached:FrameworkElementBaseAttached.IconHeight" Value="15" />
        <Setter Property="attached:FrameworkElementBaseAttached.CornerRadius" Value="5" />
        <Setter Property="attached:TextElementAttached.PlaceHolder" Value="{x:Null}" />
        <Setter Property="attached:TextElementAttached.IsAddClearButton" Value="False" />
    </Style>

    <Style x:Key="DefaultSearchControlStyle" TargetType="{x:Type pc:SearchControl}" BasedOn="{StaticResource DefaultGroupControlBaseStyle}">
        <Setter Property="Height" Value="28" />
        <Setter Property="BorderBrush" Value="{DynamicResource FieldBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource ValidationErrorBaseTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type pc:SearchControl}">
                    <Border x:Name="RootBorder"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Margin="0,-1" SnapsToDevicePixels="True"
                            CornerRadius="{TemplateBinding attached:FrameworkElementBaseAttached.CornerRadius}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBox Grid.Column="0"
                                     Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                     BorderThickness="0"
                                     attached:FrameworkElementBaseAttached.IconHeight="{TemplateBinding attached:FrameworkElementBaseAttached.IconHeight}"
                                     attached:FrameworkElementBaseAttached.IconMargin="{TemplateBinding attached:FrameworkElementBaseAttached.IconMargin}"
                                     attached:FrameworkElementBaseAttached.IconWidth="{TemplateBinding attached:FrameworkElementBaseAttached.IconWidth}"
                                     attached:TextElementAttached.IsAddClearButton="{TemplateBinding attached:TextElementAttached.IsAddClearButton}"
                                     attached:TextElementAttached.PlaceHolder="{TemplateBinding attached:TextElementAttached.PlaceHolder}" />
                            <Button Grid.Column="1"
                                    Margin="5,0"
                                    attached:FrameworkElementBaseAttached.IconGeometry="{DynamicResource SearchGeometry}"
                                    attached:FrameworkElementBaseAttached.IconHeight="15" attached:FrameworkElementBaseAttached.IconWidth="15"
                                    Command="{x:Static pc:SearchControl.SearchCommand}"
                                    Style="{DynamicResource ButtonTransparentIconStyle}"
                                    ToolTip="{TemplateBinding attached:TextElementAttached.PlaceHolder}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource FieldValidationErrorBrush}" />
                            <Setter TargetName="RootBorder" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=BorderThickness.Left, Converter={commonConverters:DoubleToThickness}, ConverterParameter=1.5}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="RootBorder" Property="BorderThickness" Value="0" />
                            <Setter Property="Background" Value="{DynamicResource UnEnabledBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource AssistantForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SearchControlAddClearButtonStyle" TargetType="{x:Type pc:SearchControl}" BasedOn="{StaticResource DefaultSearchControlStyle}">
        <Setter Property="attached:TextElementAttached.IsAddClearButton" Value="True" />
    </Style>

    <Style x:Key="DefaultEditingTagStyle" TargetType="{x:Type pc:EditingTag}" BasedOn="{StaticResource DefaultGroupControlBaseStyle}">
        <Setter Property="Height" Value="{DynamicResource DefaultTextElementHeight}" />
        <Setter Property="BorderBrush" Value="{DynamicResource FieldBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryForegroundBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HeaderMargin" Value="0,0,6,0" />
        <Setter Property="HeaderHorizontalAlignment" Value="Right" />
        <Setter Property="HeaderVerticalAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type pc:EditingTag}">
                    <Border Background="{TemplateBinding Background}" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding attached:FrameworkElementBaseAttached.CornerRadius}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{TemplateBinding HeaderWidth}"/>
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="0" Content="{TemplateBinding Header}"
                                              Margin="{TemplateBinding HeaderMargin}"
                                              HorizontalAlignment="{TemplateBinding HeaderHorizontalAlignment}"
                                              VerticalAlignment="{TemplateBinding HeaderVerticalAlignment}" />
                            <TextBox Grid.Column="1" x:Name="PART_TextBox"
                                     Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                     BorderBrush="{TemplateBinding BorderBrush}"
                                     BorderThickness="{TemplateBinding BorderThickness}"
                                     Style="{DynamicResource DefaultTextBoxStyle}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                     attached:FrameworkElementBaseAttached.CornerRadius="2"
                                     attached:FrameworkElementBaseAttached.IconHeight="{TemplateBinding attached:FrameworkElementBaseAttached.IconHeight}"
                                     attached:FrameworkElementBaseAttached.IconMargin="{TemplateBinding attached:FrameworkElementBaseAttached.IconMargin}"
                                     attached:FrameworkElementBaseAttached.IconWidth="{TemplateBinding attached:FrameworkElementBaseAttached.IconWidth}"
                                     attached:TextElementAttached.IsAddClearButton="{TemplateBinding attached:TextElementAttached.IsAddClearButton}"
                                     attached:TextElementAttached.PlaceHolder="{TemplateBinding attached:TextElementAttached.PlaceHolder}"
                                     Visibility="{TemplateBinding EditorType,Converter={commonConverters:EditorTypeToVisibilityConverter},ConverterParameter=TextBox}" />
                            <pc:NumericUpDown Grid.Column="1" x:Name="PART_NumericUpDown" Height="{TemplateBinding Height}"
                                                 BorderBrush="{TemplateBinding BorderBrush}"
                                                 BorderThickness="{TemplateBinding BorderThickness}"
                                                 Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                 HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                 attached:FrameworkElementBaseAttached.CornerRadius="2"
                                                 attached:FrameworkElementBaseAttached.IconHeight="{TemplateBinding attached:FrameworkElementBaseAttached.IconHeight}"
                                                 attached:FrameworkElementBaseAttached.IconMargin="{TemplateBinding attached:FrameworkElementBaseAttached.IconMargin}"
                                                 attached:FrameworkElementBaseAttached.IconWidth="{TemplateBinding attached:FrameworkElementBaseAttached.IconWidth}"
                                                 attached:TextElementAttached.IsAddClearButton="{TemplateBinding attached:TextElementAttached.IsAddClearButton}"
                                                 attached:TextElementAttached.PlaceHolder="{TemplateBinding attached:TextElementAttached.PlaceHolder}"
                                                 Visibility="{TemplateBinding EditorType,Converter={commonConverters:EditorTypeToVisibilityConverter},ConverterParameter=NumericUpDown}" />
                            <ContentPresenter Grid.Column="1" Content="{TemplateBinding Content}" Visibility="{TemplateBinding EditorType, Converter={commonConverters:EditorTypeToVisibilityConverter}, ConverterParameter=Other}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" TargetName="PART_TextBox"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" TargetName="PART_NumericUpDown"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EditingTagAddClearButtonStyle" TargetType="{x:Type pc:EditingTag}" BasedOn="{StaticResource DefaultEditingTagStyle}">
        <Setter Property="attached:TextElementAttached.IsAddClearButton" Value="True" />
    </Style>

</ResourceDictionary>