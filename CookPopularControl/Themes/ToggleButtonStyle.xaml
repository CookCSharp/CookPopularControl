<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:assistant="clr-namespace:CookPopularControl.Controls.Button"
                    xmlns:attached="clr-namespace:CookPopularControl.Communal.Attached"
                    xmlns:commonConverters="clr-namespace:CookPopularControl.Communal.Converters"
                    xmlns:ripple="clr-namespace:CookPopularControl.Controls.Ripple"
                    xmlns:simpleGrid="clr-namespace:CookPopularControl.Controls.Panels"
                    xmlns:toolsConverters="clr-namespace:CookPopularControl.Tools.Windows.Converters">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/CookPopularControl;component/Themes/BaseStyle/ButtonBaseStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="DefaultToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource DefaultButtonBaseStyle}">
        <Setter Property="attached:FrameworkElementBaseAttached.IconGeometry" Value="{x:Null}" />
        <Setter Property="attached:FrameworkElementBaseAttached.IconMargin" Value="0" />
    </Style>

    <Style x:Key="ToggleButtonIconStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource DefaultButtonBaseStyle}">
        <Setter Property="attached:FrameworkElementBaseAttached.IconMargin" Value="0" />
        <Setter Property="attached:FrameworkElementBaseAttached.IconWidth" Value="{DynamicResource Double26Value}" />
        <Setter Property="attached:FrameworkElementBaseAttached.IconHeight" Value="{DynamicResource Double26Value}" />
    </Style>

    <Style x:Key="ToggleButtonTransparentIconStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButtonIconStyle}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryThemeBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="attached:ButtonBaseAttached.ButtonBaseMouseOverBackground" Value="Transparent" />
        <Setter Property="attached:ButtonBaseAttached.ButtonBasePressBackground" Value="Transparent" />
    </Style>

    <Style x:Key="ToggleButtonNoMouseOverTransparentIconStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButtonIconStyle}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryThemeBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource AssistantForegroundBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ToggleButtonDoubbleIconStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButtonIconStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <SineEase x:Key="EasingFunction" EasingMode="EaseInOut" />
                        <Storyboard x:Key="CheckedStoryboard">
                            <DoubleAnimation EasingFunction="{StaticResource EasingFunction}"
                                             Storyboard.TargetName="RotateAngle" Storyboard.TargetProperty="Angle"
                                             From="180" To="0" Duration="0:0:0.3" />
                        </Storyboard>
                        <Storyboard x:Key="UnCheckedStoryboard">
                            <DoubleAnimation EasingFunction="{StaticResource EasingFunction}"
                                             Storyboard.TargetName="RotateAngle" Storyboard.TargetProperty="Angle"
                                             From="0" To="180" Duration="0:0:0.3" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <simpleGrid:SimpleGrid>
                        <AdornerDecorator CacheMode="{DynamicResource DefaultBitmapCache}">
                            <Border x:Name="RootBorder"
                                    CornerRadius="{TemplateBinding attached:FrameworkElementBaseAttached.CornerRadius}"
                                    Effect="{TemplateBinding attached:FrameworkElementBaseAttached.ShadowEffect}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                                <DockPanel Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                    <Path x:Name="PART_Icon"
                                          DockPanel.Dock="{TemplateBinding attached:FrameworkElementBaseAttached.IconDirection}"
                                          RenderTransformOrigin="0.5,0.5" Stretch="Uniform"
                                          Width="{TemplateBinding attached:FrameworkElementBaseAttached.IconWidth}"
                                          Height="{TemplateBinding attached:FrameworkElementBaseAttached.IconHeight}"
                                          Data="{TemplateBinding assistant:ToggleButtonAssistant.UnCheckedGeometry}"
                                          Fill="{TemplateBinding Foreground}"
                                          SnapsToDevicePixels="True"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                        <Path.RenderTransform>
                                            <RotateTransform x:Name="RotateAngle" Angle="0" />
                                        </Path.RenderTransform>
                                    </Path>
                                    <ContentPresenter x:Name="PART_Content" RecognizesAccessKey="True"
                                                      Margin="{TemplateBinding attached:FrameworkElementBaseAttached.IconMargin}"
                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                </DockPanel>
                            </Border>
                        </AdornerDecorator>
                        <ripple:Ripple ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                       ContentTemplate="{TemplateBinding ContentTemplate}"
                                       Focusable="False"
                                       Visibility="{TemplateBinding attached:ButtonBaseAttached.IsShowRipple,Converter={toolsConverters:BooleanToVisibilityConverter}}"
                                       Padding="{TemplateBinding Padding}"
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ripple:Ripple.Clip>
                                <MultiBinding Converter="{commonConverters:BorderClipConverter}">
                                    <Binding ElementName="border" Path="ActualWidth" />
                                    <Binding ElementName="border" Path="ActualHeight" />
                                    <Binding ElementName="border" Path="CornerRadius" />
                                    <Binding ElementName="border" Path="BorderThickness" />
                                </MultiBinding>
                            </ripple:Ripple.Clip>
                        </ripple:Ripple>
                    </simpleGrid:SimpleGrid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="PART_Icon" Property="Data" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(assistant:ToggleButtonAssistant.OnCheckedGeometry)}" />
                            <Setter TargetName="PART_Content" Property="Content" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(assistant:ToggleButtonAssistant.OnCheckedElement)}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="assistant:ToggleButtonAssistant.IsAddCheckedAnimation" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource CheckedStoryboard}" />
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource UnCheckedStoryboard}" />
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="RootBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ButtonBase}, Path=(attached:ButtonBaseAttached.ButtonBaseMouseOverBackground)}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="RootBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ButtonBase}, Path=(attached:ButtonBaseAttached.ButtonBasePressBackground)}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderThickness" Value="0" />
                            <Setter Property="BorderBrush" Value="{DynamicResource UnEnabledBrush}" />
                            <Setter Property="Background" Value="{DynamicResource UnEnabledBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource AssistantForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleButtonDoubbleTransparentIconStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource ToggleButtonDoubbleIconStyle}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryThemeBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="attached:ButtonBaseAttached.ButtonBaseMouseOverBackground" Value="Transparent" />
        <Setter Property="attached:ButtonBaseAttached.ButtonBasePressBackground" Value="Transparent" />
    </Style>

    <Style x:Key="ToggleButtonFlipStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource DefaultToggleButtonStyle}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Width" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="StoryboardChecked">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedElement" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="UnCheckedElement" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedElement" Storyboard.TargetProperty="Opacity">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="UnCheckedElement" Storyboard.TargetProperty="Opacity">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="StoryboardUnChecked">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedElement" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="UnCheckedElement" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="CheckedElement" Storyboard.TargetProperty="Opacity">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="UnCheckedElement" Storyboard.TargetProperty="Opacity">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <PowerEase EasingMode="EaseOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Viewbox>
                        <simpleGrid:SimpleGrid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                            <Border Name="UnCheckedElement"
                                    RenderTransformOrigin="0.5,0.5"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}"
                                    SnapsToDevicePixels="true">
                                <Border.Clip>
                                    <MultiBinding Converter="{commonConverters:ClipCircularConverter}">
                                        <Binding ElementName="UnCheckedElement" Path="ActualWidth" />
                                        <Binding ElementName="UnCheckedElement" Path="ActualHeight" />
                                        <Binding ElementName="UnCheckedElement" Path="CornerRadius" />
                                        <Binding ElementName="UnCheckedElement" Path="BorderThickness" />
                                    </MultiBinding>
                                </Border.Clip>
                                <Border.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="1" />
                                    </TransformGroup>
                                </Border.RenderTransform>
                                <ContentPresenter RecognizesAccessKey="True"
                                                  Margin="{TemplateBinding Padding}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Border>
                            <Border Name="CheckedElement"
                                    RenderTransformOrigin="0.5,0.5"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    Background="{TemplateBinding Background}"
                                    SnapsToDevicePixels="true">
                                <Border.Clip>
                                    <MultiBinding Converter="{commonConverters:ClipCircularConverter}">
                                        <Binding ElementName="CheckedElement" Path="ActualWidth" />
                                        <Binding ElementName="CheckedElement" Path="ActualHeight" />
                                        <Binding ElementName="CheckedElement" Path="CornerRadius" />
                                        <Binding ElementName="CheckedElement" Path="BorderThickness" />
                                    </MultiBinding>
                                </Border.Clip>
                                <Border.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="0" />
                                    </TransformGroup>
                                </Border.RenderTransform>
                                <ContentPresenter RecognizesAccessKey="True"
                                                  Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(assistant:ToggleButtonAssistant.OnCheckedElement)}"
                                                  Margin="{TemplateBinding Padding}"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Border>
                        </simpleGrid:SimpleGrid>
                    </Viewbox>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonBaseMouseOverBackground}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonBasePressBackground}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardChecked}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource StoryboardUnChecked}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource UnEnabledBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>