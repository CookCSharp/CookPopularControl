<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:common="clr-namespace:CookPopularControl.Communal"
                    xmlns:pc="clr-namespace:CookPopularControl.Controls"
                    xmlns:pt="https://Chance.CookPopularCSharpToolkit/2021/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/CookPopularControl;component/Themes/BaseStyle/ControlBaseStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="SliderRepeatButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SliderThumb" TargetType="{x:Type Thumb}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ShowHorizontalSliderValueGridStoryboard">
                            <DoubleAnimation Storyboard.TargetName="SliderValueHorizontalGrid"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             From="0" To="1" Duration="0:0:0.2" />
                            <DoubleAnimation Storyboard.TargetName="SliderValueHorizontalGrid"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                             From="0" To="1" Duration="0:0:0.2" />
                        </Storyboard>
                        <Storyboard x:Key="HideHorizontalSliderValueGridStoryboard">
                            <DoubleAnimation Storyboard.TargetName="SliderValueHorizontalGrid"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             From="1" To="0" Duration="0:0:0.2" />
                            <DoubleAnimation Storyboard.TargetName="SliderValueHorizontalGrid"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                             From="1" To="0" Duration="0:0:0.2" />
                        </Storyboard>
                        <Storyboard x:Key="ShowVerticalSliderValueGridStoryboard">
                            <DoubleAnimation Storyboard.TargetName="SliderValueVerticalGrid"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             From="0" To="1" Duration="0:0:0.2" />
                            <DoubleAnimation Storyboard.TargetName="SliderValueVerticalGrid"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                             From="0" To="1" Duration="0:0:0.2" />
                        </Storyboard>
                        <Storyboard x:Key="HideVerticalSliderValueGridStoryboard">
                            <DoubleAnimation Storyboard.TargetName="SliderValueVerticalGrid"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
                                             From="1" To="0" Duration="0:0:0.2" />
                            <DoubleAnimation Storyboard.TargetName="SliderValueVerticalGrid"
                                             Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)"
                                             From="1" To="0" Duration="0:0:0.2" />
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Border x:Name="ThumbBorder"
                                Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Slider}, Path=(common:ThumbAttached.ThumbWidth)}"
                                Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Slider}, Path=(common:ThumbAttached.ThumbHeight)}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Margin="-1">
                            <Grid x:Name="GeometryGrid">
                                <!--<Path Data="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Slider},Path=(common:ThumbAttached.ThumbGeometryData)}"
                                      Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Slider},Path=Foreground}" Stretch="Uniform" Focusable="True"/>-->
                                <Ellipse Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Slider}, Path=Foreground}" />
                                <!--<Rectangle Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Slider},Path=Foreground}"/>-->
                            </Grid>
                        </Border>
                        <Canvas HorizontalAlignment="Center" VerticalAlignment="Top">
                            <Grid x:Name="SliderValueHorizontalGrid"
                                  Height="36"
                                  IsHitTestVisible="False" RenderTransformOrigin="0.5,1">
                                <Grid.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="0" ScaleY="0" />
                                        <TranslateTransform X="{Binding ActualWidth, ElementName=SliderValueHorizontalGrid, Converter={pt:ValueTranslateToDoubleConverter}, ConverterParameter=-0.5}" Y="-40" />
                                    </TransformGroup>
                                </Grid.RenderTransform>
                                <AdornerDecorator>
                                    <AdornerDecorator.CacheMode>
                                        <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </AdornerDecorator.CacheMode>
                                    <Grid Effect="{DynamicResource ShadowEffectDepth1}">
                                        <Rectangle Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Slider}, Path=Foreground}"
                                                   Margin="0,0,0,8"
                                                   RadiusX="2" RadiusY="2" />
                                        <Polygon Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Slider}, Path=Foreground}"
                                                 HorizontalAlignment="Center" VerticalAlignment="Bottom"
                                                 Points="0,0 6,8 12,0" />
                                    </Grid>
                                </AdornerDecorator>
                                <TextBlock Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Slider}, Path=Value}"
                                           Foreground="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Slider}, Path=(pc:SliderAssistant.TextColor)}"
                                           Margin="8,0,8,8"
                                           VerticalAlignment="Center"
                                           TextAlignment="Center" />
                            </Grid>
                            <Grid x:Name="SliderValueVerticalGrid"
                                  Height="36"
                                  IsHitTestVisible="False" RenderTransformOrigin="1,0.5">
                                <Grid.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform ScaleX="0" ScaleY="0" />
                                        <TranslateTransform>
                                            <TranslateTransform.X>
                                                <MultiBinding Converter="{common:SliderValueLeftPositionXConverter}">
                                                    <Binding ElementName="SliderValueVerticalGrid" Path="ActualWidth" />
                                                    <Binding ElementName="ThumbBorder" Path="ActualWidth" />
                                                </MultiBinding>
                                            </TranslateTransform.X>
                                            <TranslateTransform.Y>
                                                <Binding Converter="{common:SliderValueLeftPositionYConverter}" ElementName="ThumbBorder" Path="ActualWidth" />
                                            </TranslateTransform.Y>
                                        </TranslateTransform>
                                    </TransformGroup>
                                </Grid.RenderTransform>
                                <AdornerDecorator>
                                    <AdornerDecorator.CacheMode>
                                        <BitmapCache SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </AdornerDecorator.CacheMode>
                                    <Grid Effect="{DynamicResource ShadowEffectDepth1}">
                                        <Rectangle Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Slider}, Path=Foreground}"
                                                   Margin="0,0,8,0"
                                                   RadiusX="2" RadiusY="2" />
                                        <Polygon Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Slider}, Path=Foreground}"
                                                 HorizontalAlignment="Right" VerticalAlignment="Center"
                                                 Points="0,0 8,6 0,12" />
                                    </Grid>
                                </AdornerDecorator>
                                <TextBlock Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=Slider}, Path=Value}"
                                           Foreground="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Slider}, Path=(pc:SliderAssistant.TextColor)}"
                                           Margin="8,0,14,0"
                                           HorizontalAlignment="Center" VerticalAlignment="Center"
                                           TextAlignment="Center" />
                            </Grid>
                        </Canvas>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Slider}, Path=(pc:SliderAssistant.IsShowValue)}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsDragging}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Slider}, Path=Orientation}" Value="Horizontal" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ShowHorizontalSliderValueGridStoryboard}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HideHorizontalSliderValueGridStoryboard}" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Slider}, Path=(pc:SliderAssistant.IsShowValue)}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsDragging}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Slider}, Path=Orientation}" Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource ShowVerticalSliderValueGridStoryboard}" />
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource HideVerticalSliderValueGridStoryboard}" />
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="SliderHorizontal" TargetType="{x:Type Slider}">
        <Border BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                CornerRadius="{TemplateBinding common:FrameworkElementBaseAttached.CornerRadius}"
                SnapsToDevicePixels="True"
                UseLayoutRounding="True">
            <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding MinHeight}" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TickBar x:Name="TopLeftTick" Grid.Row="0"
                         Height="5"
                         Fill="{TemplateBinding Foreground}"
                         Margin="0,0,0,5"
                         Visibility="Collapsed"
                         Placement="Top" />
                <TickBar x:Name="BottomRightTick" Grid.Row="2"
                         Height="5"
                         Fill="{TemplateBinding Foreground}"
                         Margin="0,5,0,0"
                         Visibility="Collapsed"
                         Placement="Bottom" />
                <Border Grid.Row="1"
                        Height="{TemplateBinding common:ThumbAttached.ThumbHeight, Converter={pt:ValueTranslateToDoubleConverter}, ConverterParameter=0.25}"
                        Background="{TemplateBinding Foreground}"
                        CornerRadius="4"
                        Opacity="0.5" />
                <Border x:Name="ValueBorder" Grid.Row="1"
                        Width="{Binding ElementName=PART_Track, Path=DecreaseRepeatButton.ActualWidth}"
                        Height="{TemplateBinding common:ThumbAttached.ThumbHeight, Converter={pt:ValueTranslateToDoubleConverter}, ConverterParameter=0.25}"
                        Background="{TemplateBinding Foreground}"
                        CornerRadius="4,0,0,4"
                        HorizontalAlignment="Left" VerticalAlignment="Center" />
                <Canvas Grid.Row="1" Height="{TemplateBinding common:ThumbAttached.ThumbHeight, Converter={pt:ValueTranslateToDoubleConverter}, ConverterParameter=0.25}" VerticalAlignment="Center">
                    <Border x:Name="PART_SelectionRange"
                            Height="{TemplateBinding common:ThumbAttached.ThumbHeight, Converter={pt:ValueTranslateToDoubleConverter}, ConverterParameter=0.25}"
                            Background="{TemplateBinding pc:SliderAssistant.SliderSelectionRangeFill}"
                            CornerRadius="4" />
                </Canvas>
                <Track x:Name="PART_Track" Grid.Row="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource SliderRepeatButton}" />
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource SliderRepeatButton}" />
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{StaticResource SliderThumb}" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" Value="Visible" TargetName="TopLeftTick" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" Value="Visible" TargetName="BottomRightTick" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" Value="Visible" TargetName="TopLeftTick" />
                <Setter Property="Visibility" Value="Visible" TargetName="BottomRightTick" />
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" Value="Visible" TargetName="PART_SelectionRange" />
            </Trigger>
            <Trigger Property="IsDirectionReversed" Value="True">
                <Setter Property="CornerRadius" Value="0,4,4,0" TargetName="ValueBorder" />
                <Setter Property="HorizontalAlignment" Value="Right" TargetName="ValueBorder" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="SliderVertical" TargetType="{x:Type Slider}">
        <Border BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                CornerRadius="{TemplateBinding common:FrameworkElementBaseAttached.CornerRadius}"
                SnapsToDevicePixels="True"
                UseLayoutRounding="True">
            <Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding MinWidth}" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <TickBar x:Name="TopLeftTick" Grid.Column="0"
                         Width="5"
                         Fill="{TemplateBinding Foreground}"
                         Margin="0,0,5,0"
                         Visibility="Collapsed"
                         Placement="Left" />
                <TickBar x:Name="BottomRightTick" Grid.Column="2"
                         Width="5"
                         Fill="{TemplateBinding Foreground}"
                         Margin="5,0,0,0"
                         Visibility="Collapsed"
                         Placement="Right" />
                <Border Grid.Column="1"
                        Width="{TemplateBinding common:ThumbAttached.ThumbWidth, Converter={pt:ValueTranslateToDoubleConverter}, ConverterParameter=0.25}"
                        Background="{TemplateBinding Foreground}"
                        CornerRadius="4"
                        Opacity="0.4" />
                <Border x:Name="ValueBorder" Grid.Column="1"
                        Width="{TemplateBinding common:ThumbAttached.ThumbWidth, Converter={pt:ValueTranslateToDoubleConverter}, ConverterParameter=0.25}"
                        Height="{Binding ElementName=PART_Track, Path=DecreaseRepeatButton.ActualHeight}"
                        Background="{TemplateBinding Foreground}"
                        CornerRadius="0,0,4,4"
                        HorizontalAlignment="Center" VerticalAlignment="Bottom" />
                <Canvas Grid.Column="1" Width="{TemplateBinding common:ThumbAttached.ThumbWidth, Converter={pt:ValueTranslateToDoubleConverter}, ConverterParameter=0.25}" HorizontalAlignment="Center">
                    <Border x:Name="PART_SelectionRange"
                            Width="{TemplateBinding common:ThumbAttached.ThumbWidth, Converter={pt:ValueTranslateToDoubleConverter}, ConverterParameter=0.25}"
                            Background="{TemplateBinding pc:SliderAssistant.SliderSelectionRangeFill}"
                            CornerRadius="4" />
                </Canvas>
                <Track x:Name="PART_Track" Grid.Column="1">
                    <Track.DecreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.DecreaseLarge}" Style="{StaticResource SliderRepeatButton}" />
                    </Track.DecreaseRepeatButton>
                    <Track.IncreaseRepeatButton>
                        <RepeatButton Command="{x:Static Slider.IncreaseLarge}" Style="{StaticResource SliderRepeatButton}" />
                    </Track.IncreaseRepeatButton>
                    <Track.Thumb>
                        <Thumb SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Style="{StaticResource SliderThumb}" />
                    </Track.Thumb>
                </Track>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="TickPlacement" Value="TopLeft">
                <Setter Property="Visibility" Value="Visible" TargetName="TopLeftTick" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
                <Setter Property="Visibility" Value="Visible" TargetName="BottomRightTick" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
                <Setter Property="Visibility" Value="Visible" TargetName="TopLeftTick" />
                <Setter Property="Visibility" Value="Visible" TargetName="BottomRightTick" />
            </Trigger>
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
                <Setter Property="Visibility" Value="Visible" TargetName="PART_SelectionRange" />
            </Trigger>
            <Trigger Property="IsDirectionReversed" Value="True">
                <Setter Property="CornerRadius" Value="4,4,0,0" TargetName="ValueBorder" />
                <Setter Property="VerticalAlignment" Value="Top" TargetName="ValueBorder" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="SliderBaseStyle" TargetType="{x:Type Slider}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryThemeBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="IsMoveToPointEnabled" Value="True" />
        <Setter Property="IsSnapToTickEnabled" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="UseLayoutRounding" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="False" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Template" Value="{StaticResource SliderHorizontal}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Template" Value="{StaticResource SliderVertical}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource UnEnabledBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>