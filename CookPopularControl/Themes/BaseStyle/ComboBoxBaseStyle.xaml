<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:common="clr-namespace:CookPopularControl.Communal"
                    xmlns:gif="https://github.com/XamlAnimatedGif/XamlAnimatedGif"
                    xmlns:pc="clr-namespace:CookPopularControl.Controls"
                    xmlns:toolkit="https://Chance.CookPopularCSharpToolkit/2021/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/CookPopularControl;component/Themes/BaseStyle/ControlsBaseStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--  下拉按钮  -->
    <Style x:Key="DropDownToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Cursor" Value="Hand" />
        <!--<Setter Property="ToolTip" Value="点击展开" />-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="CheckedStoryboard">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame Value="1" KeyTime="0" />
                                <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame Value="1" KeyTime="0" />
                                <EasingDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="border"
                            Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=Height, Converter={toolkit:ValueTranslateToDoubleConverter}, ConverterParameter=0.7}"
                            Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=Height, Converter={toolkit:ValueTranslateToDoubleConverter}, ConverterParameter=0.7}"
                            Background="Transparent"
                            RenderTransformOrigin="0.5,0.5">
                        <Border.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1" />
                            </TransformGroup>
                        </Border.RenderTransform>
                        <Path Data="{DynamicResource DownTriangleGeometry}"
                              Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(pc:ComboBoxAssistant.DropDownButtonFill)}"
                              Stretch="Uniform"
                              HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="IsCheckedStoryboard" Storyboard="{StaticResource CheckedStoryboard}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="IsCheckedStoryboard" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="#44000000"
                                                      Opacity="0.25"
                                                      Direction="180" ShadowDepth="1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost"
                                  Background="Transparent"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  Focusable="False"
                                  HorizontalScrollBarVisibility="Hidden"
                                  UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                  VerticalScrollBarVisibility="Hidden" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  SimpleComboBox  -->
    <Style x:Key="ComboBoxBaseStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Height" Value="{DynamicResource DefaultControlHeight}" />
        <Setter Property="Background" Value="{DynamicResource PrimaryBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryForegroundBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource FieldBorderBrush}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Padding" Value="8,0,0,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />

        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBoxItem}">
                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=Foreground}" />
                    <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=Height}" />
                    <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=Width}" />
                    <Setter Property="pc:RippleAssist.Feedback" Value="#FFFFFF" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                <pc:SimpleGrid x:Name="ItemGrid" Margin="0,0,1,0">
                                    <pc:Ripple Background="Transparent"
                                               ContentTemplate="{TemplateBinding ContentTemplate}"
                                               ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                               Padding="{TemplateBinding Padding}"
                                               SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                               Focusable="False"
                                               HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                               VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                               Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBox}, Path=(pc:RippleAssist.IsDisabled), Converter={toolkit:BooleanToVisibilityReConverter}}" />
                                    <ContentPresenter Content="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                      Margin="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=Padding}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                </pc:SimpleGrid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Foreground" Value="{DynamicResource AssistantForegroundBrush}" />
                                        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.ItemMouseOverBackground)}" TargetName="ItemGrid" />
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="PopupLoaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PopupBorder" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame Value="0" KeyTime="0" />
                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PopupBorder" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame Value="0" KeyTime="0" />
                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="PART_Border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="{TemplateBinding common:FrameworkElementBaseAttached.CornerRadius}">
                        <Grid x:Name="RootGrid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBlock x:Name="PART_PlaceHolder"
                                       Text="{TemplateBinding common:TextElementAttached.PlaceHolder}"
                                       Foreground="{TemplateBinding common:TextElementAttached.PlaceHolderBrush}"
                                       Background="Transparent"
                                       FontSize="{TemplateBinding FontSize}"
                                       Padding="{TemplateBinding Padding}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       TextAlignment="Left" />
                            <TextBox x:Name="PART_EditableTextBox"
                                     Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, Mode=TwoWay}"
                                     Background="Purple"
                                     Padding="{TemplateBinding Padding}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                     IsHitTestVisible="{TemplateBinding IsEditable}"
                                     IsReadOnly="{TemplateBinding IsReadOnly}"
                                     Style="{StaticResource ComboBoxEditableTextBox}" />
                            <WrapPanel Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Center">
                                <Button x:Name="PART_ClearButton"
                                        BorderThickness="0"
                                        Foreground="{DynamicResource PrimaryThemeBrush}"
                                        Background="Transparent"
                                        Margin="{TemplateBinding common:FrameworkElementBaseAttached.IconMargin}"
                                        ToolTip="Clear"
                                        common:FrameworkElementBaseAttached.IconGeometry="{DynamicResource CloseCircleGeometry}"
                                        common:FrameworkElementBaseAttached.IconHeight="{TemplateBinding common:FrameworkElementBaseAttached.IconHeight}"
                                        common:FrameworkElementBaseAttached.IconWidth="{TemplateBinding common:FrameworkElementBaseAttached.IconWidth}"
                                        Effect="{x:Null}"
                                        Style="{DynamicResource ButtonTransparentIconStyle}">
                                    <Button.Visibility>
                                        <MultiBinding Converter="{common:TextFieldClearButtonVisibilityConverter}">
                                            <Binding Path="(common:TextElementAttached.IsAddClearButton)" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                            <Binding Path="Text" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                        </MultiBinding>
                                    </Button.Visibility>
                                </Button>
                                <ToggleButton Margin="8,0" Focusable="False"
                                              HorizontalAlignment="Right"
                                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              Visibility="{TemplateBinding pc:ComboBoxAssistant.IsShowDropDownButton, Converter={toolkit:BooleanToVisibilityConverter}}"
                                              Style="{StaticResource DropDownToggleButtonStyle}" />
                            </WrapPanel>
                            <Popup x:Name="PART_Popup"
                                   AllowsTransparency="True" HorizontalOffset="-1"
                                   IsOpen="{TemplateBinding IsDropDownOpen}"
                                   Placement="Bottom" PopupAnimation="Slide" VerticalOffset="0">
                                <Border x:Name="PopupBorder"
                                        Width="{Binding ElementName=PART_Border, Path=ActualWidth}"
                                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Background="{TemplateBinding common:SelectorAttached.ItemsListBackground}"
                                        Margin="5"
                                        CacheMode="{DynamicResource DefaultBitmapCache}"
                                        Effect="{TemplateBinding pc:ComboBoxAssistant.ComboBoxPopupListShadow}">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="0" ScaleY="0" />
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                    <ScrollViewer x:Name="DropDownScorllViewer"
                                                  MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                                  Margin="0,0,0,5" SnapsToDevicePixels="True"
                                                  CacheMode="{DynamicResource DefaultBitmapCache}"
                                                  CanContentScroll="True" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                        <!--<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>-->
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text, Converter={toolkit:EmptyOrNullToBooleanConverter}}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_PlaceHolder" />
                        </DataTrigger>
                        <Trigger Property="IsDropDownOpen" Value="true">
                            <Setter Property="common:FrameworkElementBaseAttached.CornerRadius" Value="2,2,0,0" />
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="PopupLoadedStoryBoard" Storyboard="{StaticResource PopupLoaded}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="PopupLoadedStoryBoard" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True" SourceName="PART_EditableTextBox">
                            <Setter Property="CaretBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}" TargetName="PART_EditableTextBox" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="MultiComboBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=Foreground}" />
        <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=ActualWidth}" />
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=ActualHeight}" />
        <Setter Property="pc:RippleAssist.Feedback" Value="#FFFFFF" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="ItemBorder" BorderBrush="Transparent" Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.ItemsListBackground)}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <pc:Ripple ContentTemplate="{TemplateBinding ContentTemplate}"
                                       ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                       Padding="{TemplateBinding Padding}"
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                       Focusable="False"
                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBox}, Path=(pc:RippleAssist.IsDisabled), Converter={toolkit:BooleanToVisibilityReConverter}}" />
                            <TextBlock x:Name="ItemContent" Grid.Column="0"
                                       Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"
                                       Padding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=Padding}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <Grid x:Name="ItemGrid" Grid.Column="1"
                                  Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.ItemControlWidth)}"
                                  Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.ItemControlHeight)}"
                                  Margin="10,0"
                                  HorizontalAlignment="Center">
                                <CheckBox x:Name="ItemCheckBox"
                                          Width="{Binding ElementName=ItemGrid, Path=Width}"
                                          Height="{Binding ElementName=ItemGrid, Path=Height}"
                                          Content="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.CheckBoxContent)}"
                                          Focusable="True"
                                          common:SelectorAttached.IsCheckBoxChecked="True"
                                          IsChecked="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsSelected}"
                                          Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.SelectorItemType), Converter={common:SelectorItemTypeToVisibilityConverter}, ConverterParameter=CheckBox}" />
                                <Button x:Name="ItemButton"
                                        Width="{Binding ElementName=ItemGrid, Path=ActualWidth}"
                                        Height="{Binding ElementName=ItemGrid, Path=ActualHeight}"
                                        Content="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.ButtonContent)}"
                                        Focusable="True" ToolTip="Delete"
                                        HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                                        common:ButtonBaseAttached.ButtonBaseMouseOverBackground="{DynamicResource AssistantForegroundBrush}"
                                        common:ButtonBaseAttached.ButtonBasePressBackground="{DynamicResource AssistantForegroundBrush}"
                                        common:FrameworkElementBaseAttached.CornerRadius="2"
                                        common:SelectorAttached.IsButtonDeleteItem="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.IsButtonDeleteItem)}"
                                        Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.SelectorItemType), Converter={common:SelectorItemTypeToVisibilityConverter}, ConverterParameter=Button}" />
                                <!--  Data="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(common:FrameworkElementBaseAttached.IconGeometry)}"  -->
                                <Path x:Name="ItemIcon"
                                      Width="{Binding ElementName=ItemGrid, Path=Width}"
                                      Height="{Binding ElementName=ItemGrid, Path=Height}"
                                      Data="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.GeometryData}"
                                      Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.IconFill)}"
                                      Stretch="Uniform"
                                      Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.SelectorItemType), Converter={common:SelectorItemTypeToVisibilityConverter}, ConverterParameter=Icon}" />
                                <!--  Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(common:SelectorAttached.ImageSource)}"  -->
                                <!--  gif:AnimationBehavior.SourceUri="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(common:SelectorAttached.GifSource)}"  -->
                                <Image x:Name="ItemImageGif"
                                       Width="{Binding ElementName=ItemGrid, Path=Width}"
                                       Height="{Binding ElementName=ItemGrid, Path=Height}"
                                       Source="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.ImageSource}"
                                       common:SelectorAttached.IsPreviewImage="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.IsPreviewImage)}"
                                       gif:AnimationBehavior.SourceUri="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.GifSource}"
                                       Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.SelectorItemType), Converter={common:SelectorItemTypeToVisibilityConverter}, ConverterParameter=Image}" />
                            </Grid>
                            <Popup x:Name="Popup_PreviewImage"
                                   AllowsTransparency="True" Placement="Right" PopupAnimation="Slide">
                                <Image Width="300" Height="300" Source="{Binding ElementName=ItemImageGif, Path=Source}" />
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.SelectorItemType)}" Value="Icon">
                            <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.Content}" TargetName="ItemContent" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.SelectorItemType)}" Value="Image">
                            <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.Content}" TargetName="ItemContent" />
                        </DataTrigger>
                        <!--  鼠标仅在Image之上时触发  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" SourceName="ItemImageGif" />
                                <Condition Property="common:SelectorAttached.IsPreviewImage" Value="True" SourceName="ItemImageGif" />
                            </MultiTrigger.Conditions>
                            <Setter Property="IsOpen" Value="True" TargetName="Popup_PreviewImage" />
                        </MultiTrigger>
                        <!--  鼠标在整个ListBoxItem之上时触发  -->
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(common:SelectorAttached.IsPreviewImage)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsOpen" Value="True" TargetName="Popup_PreviewImage"/>
                        </MultiDataTrigger>-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource AssistantForegroundBrush}" TargetName="ItemCheckBox" />
                            <Setter Property="Background" Value="{DynamicResource AssistantForegroundBrush}" TargetName="ItemButton" />
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryThemeBrush}" TargetName="ItemButton" />
                            <Setter Property="Fill" Value="{DynamicResource AssistantForegroundBrush}" TargetName="ItemIcon" />

                            <Setter Property="Foreground" Value="{DynamicResource AssistantForegroundBrush}" />
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ComboBox}, Path=(common:SelectorAttached.ItemMouseOverBackground)}" TargetName="ItemBorder" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True" SourceName="ItemCheckBox">
                            <Setter Property="BorderThickness" Value="3" TargetName="ItemCheckBox" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  MultiComboBox  -->
    <Style x:Key="MultiComboBoxBaseStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxBaseStyle}">
        <Setter Property="Height" Value="{DynamicResource DefaultControlHeight}" />
        <Setter Property="pc:RippleAssist.IsDisabled" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="PopupLoaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PopupBorder" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                <EasingDoubleKeyFrame Value="0" KeyTime="0" />
                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.1" />
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="PopupBorder" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                <EasingDoubleKeyFrame Value="0" KeyTime="0" />
                                <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="PART_Border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="{TemplateBinding common:FrameworkElementBaseAttached.CornerRadius}"
                            SnapsToDevicePixels="True"
                            Cursor="{TemplateBinding Cursor}">
                        <Grid x:Name="RootGrid" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBlock x:Name="PART_PlaceHolder"
                                       Text="{TemplateBinding common:TextElementAttached.PlaceHolder}"
                                       Foreground="{TemplateBinding common:TextElementAttached.PlaceHolderBrush}"
                                       FontSize="{TemplateBinding FontSize}"
                                       Padding="{TemplateBinding Padding}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                       TextAlignment="Left" />
                            <TextBox x:Name="PART_EditableTextBox"
                                     Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, Mode=TwoWay}"
                                     Padding="{TemplateBinding Padding}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                     IsHitTestVisible="{TemplateBinding IsEditable}"
                                     IsReadOnly="{TemplateBinding IsReadOnly}"
                                     Style="{StaticResource ComboBoxEditableTextBox}" />
                            <WrapPanel Grid.Column="1"
                                       HorizontalAlignment="Right" VerticalAlignment="Center"
                                       Orientation="Horizontal">
                                <Button x:Name="PART_ClearButton"
                                        BorderThickness="0"
                                        Foreground="{DynamicResource PrimaryThemeBrush}"
                                        Background="Transparent"
                                        Margin="{TemplateBinding common:FrameworkElementBaseAttached.IconMargin}"
                                        ToolTip="Clear"
                                        common:FrameworkElementBaseAttached.IconGeometry="{DynamicResource CloseCircleGeometry}"
                                        common:FrameworkElementBaseAttached.IconHeight="{TemplateBinding common:FrameworkElementBaseAttached.IconHeight}"
                                        common:FrameworkElementBaseAttached.IconWidth="{TemplateBinding common:FrameworkElementBaseAttached.IconWidth}"
                                        Effect="{x:Null}"
                                        Style="{DynamicResource ButtonTransparentIconStyle}">
                                    <Button.Visibility>
                                        <MultiBinding Converter="{common:TextFieldClearButtonVisibilityConverter}">
                                            <Binding Path="(common:TextElementAttached.IsAddClearButton)" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                            <Binding Path="Text" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                        </MultiBinding>
                                    </Button.Visibility>
                                </Button>
                                <ToggleButton Margin="8,0" Focusable="False"
                                              HorizontalAlignment="Right"
                                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                              Style="{StaticResource DropDownToggleButtonStyle}" />
                            </WrapPanel>
                            <Popup x:Name="PART_Popup"
                                   AllowsTransparency="True" HorizontalOffset="-1"
                                   IsOpen="{TemplateBinding IsDropDownOpen}"
                                   Placement="Bottom" PopupAnimation="Slide" VerticalOffset="0">
                                <Border x:Name="PopupBorder"
                                        Width="{Binding ElementName=PART_Border, Path=ActualWidth}"
                                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        Background="{TemplateBinding common:SelectorAttached.ItemsListBackground}"
                                        Margin="5"
                                        CacheMode="{DynamicResource DefaultBitmapCache}"
                                        Effect="{TemplateBinding pc:ComboBoxAssistant.ComboBoxPopupListShadow}">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="0" ScaleY="0" />
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                    <!--  ItemsSource="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Items}"  -->
                                    <ListBox x:Name="PART_ListBox"
                                             Width="{TemplateBinding Width}"
                                             MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                             BorderThickness="0"
                                             Margin="0,0,0,5"
                                             HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                             VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                             pc:RippleAssist.IsDisabled="{TemplateBinding pc:RippleAssist.IsDisabled}"
                                             ItemContainerStyle="{StaticResource MultiComboBoxItemStyle}"
                                             ItemTemplate="{TemplateBinding ItemTemplate}"
                                             ScrollViewer.HorizontalScrollBarVisibility="Disabled" SelectionMode="Extended" />
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text, Converter={toolkit:EmptyOrNullToBooleanConverter}}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_PlaceHolder" />
                        </DataTrigger>
                        <Trigger Property="IsDropDownOpen" Value="true">
                            <Setter Property="common:FrameworkElementBaseAttached.CornerRadius" Value="2,2,0,0" />
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="PopupLoadedStoryBoard" Storyboard="{StaticResource PopupLoaded}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="PopupLoadedStoryBoard" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True" SourceName="PART_EditableTextBox">
                            <Setter Property="CaretBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}" TargetName="PART_EditableTextBox" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>