<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ripple="clr-namespace:CookPopularControl.Controls.Ripple"
                    xmlns:attached="clr-namespace:CookPopularControl.Communal.Attached"                 
                    xmlns:assistant="clr-namespace:CookPopularControl.Controls.ComboBox"
                    xmlns:commonConverters="clr-namespace:CookPopularControl.Communal.Converters"
                    xmlns:toolsConverters="clr-namespace:CookPopularControl.Tools.Windows.Converters"
                    xmlns:gif="https://github.com/XamlAnimatedGif/XamlAnimatedGif">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/CookPopularControl;component/Themes/BaseStyle/ControlsBaseStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--下拉按钮-->
    <Style x:Key="DropDownToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="ToolTip" Value="点击展开" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="CheckedStoryboard">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="border">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="border" Background="Transparent" RenderTransformOrigin="0.5,0.5"
                            Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=Height,Converter={toolsConverters:ValueTranslateConverter},ConverterParameter=0.7}"
                            Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=Height,Converter={toolsConverters:ValueTranslateConverter},ConverterParameter=0.7}">
                        <Border.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1" ScaleY="1"/>
                            </TransformGroup>
                        </Border.RenderTransform>
                        <Path Data="{DynamicResource DownTriangleGeometry}" Stretch="Uniform"
                              Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(assistant:ComboBoxAssistant.DropDownButtonFill)}" 
                              HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="IsCheckedStoryboard" Storyboard="{StaticResource CheckedStoryboard}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="IsCheckedStoryboard"/>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect ShadowDepth="1" Opacity="0.25" Direction="180" Color="#44000000"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost"
                                  Focusable="False"
                                  HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden"
                                  Background="Transparent"
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                  UseLayoutRounding="{TemplateBinding UseLayoutRounding}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--SimpleComboBox-->
    <Style x:Key="ComboBoxBaseStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="{DynamicResource DefaultBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryForeground}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource FieldBorderBrush}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Padding" Value="8,0,0,0"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />

        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBoxItem}">
                    <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=Foreground}"/>
                    <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=Height}"/>
                    <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=Width}"/>
                    <Setter Property="ripple:RippleAssist.Feedback" Value="#FFFFFF" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                <Border x:Name="ItemBorder" Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.ItemsListBackground)}" Margin="0,0,1,0">
                                    <Grid>
                                        <ripple:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"
                                           ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                           HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                           Padding="{TemplateBinding Padding}" Background="Transparent"
                                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                           Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBox},Path=(ripple:RippleAssist.IsDisabled),Converter={toolsConverters:BooleanToVisibilityReConverter}}"/>
                                        <ContentPresenter Content="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                      Margin="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=Padding}"/>
                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Foreground" Value="{DynamicResource AssistantForeground}" />
                                        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.ItemMouseOverBackground)}" TargetName="ItemBorder"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="PopupLoaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="PopupBorder">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="PopupBorder">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="PART_Border"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding attached:FrameworkElementBaseAttached.CornerRadius}">
                        <Grid x:Name="RootGrid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock x:Name="PART_PlaceHolder" Text="{TemplateBinding attached:TextElementAttached.PlaceHolder}" 
                                       Foreground="{TemplateBinding attached:TextElementAttached.PlaceHolderBrush}" Background="Transparent"
                                       TextAlignment="Left" FontSize="{TemplateBinding FontSize}" Padding="{TemplateBinding Padding}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <TextBox x:Name="PART_EditableTextBox" Style="{StaticResource ComboBoxEditableTextBox}" Background="Purple"
                                     Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Text,Mode=TwoWay}"
                                     IsHitTestVisible="{TemplateBinding IsEditable}" IsReadOnly="{TemplateBinding IsReadOnly}" Padding="{TemplateBinding Padding}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <WrapPanel Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Center">
                                <Button x:Name="PART_ClearButton" Effect="{x:Null}" ToolTip="Clear"
                                        Style="{DynamicResource ButtonTransparentIconStyle}"
                                        attached:FrameworkElementBaseAttached.IconWidth="{TemplateBinding attached:FrameworkElementBaseAttached.IconWidth}"
                                        attached:FrameworkElementBaseAttached.IconHeight="{TemplateBinding attached:FrameworkElementBaseAttached.IconHeight}"
                                        attached:FrameworkElementBaseAttached.IconGeometry="{DynamicResource CloseCircleGeometry}"
                                        Margin="{TemplateBinding attached:FrameworkElementBaseAttached.IconMargin}"
                                        Foreground="{DynamicResource PrimaryColorTheme}" Background="Transparent" BorderThickness="0">
                                    <Button.Visibility>
                                        <MultiBinding Converter="{commonConverters:TextFieldClearButtonVisibilityConverter}">
                                            <Binding RelativeSource="{RelativeSource Mode=TemplatedParent}" Path="(attached:TextElementAttached.IsAddClearButton)"/>
                                            <Binding RelativeSource="{RelativeSource Mode=TemplatedParent}" Path="Text"/>
                                        </MultiBinding>
                                    </Button.Visibility>
                                </Button>
                                <ToggleButton Style="{StaticResource DropDownToggleButtonStyle}"
                                              Focusable="False" HorizontalAlignment="Right" Margin="8,0"
                                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </WrapPanel>
                            <Popup x:Name="PART_Popup" IsOpen="{TemplateBinding IsDropDownOpen}" PopupAnimation="Slide" Placement="Bottom"
                                   HorizontalOffset="-1" VerticalOffset="0" AllowsTransparency="True" >
                                <Border x:Name="PopupBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"                                          
                                        Width="{Binding ElementName=PART_Border,Path=ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                        Margin="1" Effect="{TemplateBinding assistant:ComboBoxAssistant.ComboBoxPopupListShadow}" >
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="0" ScaleY="0"/>
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                    <ScrollViewer x:Name="DropDownScorllViewer" CanContentScroll="True" SnapsToDevicePixels="True"
                                                  MaxHeight="{TemplateBinding MaxDropDownHeight}" CacheMode="{DynamicResource DefaultBitmapCache}" 
                                                  HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                        <!--<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>-->
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=Text,Converter={toolsConverters:ValueIsEmptyOrNullConverter}}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_PlaceHolder"/>
                        </DataTrigger>
                        <Trigger Property="IsDropDownOpen" Value="true">
                            <Setter Property="attached:FrameworkElementBaseAttached.CornerRadius" Value="2,2,0,0"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="PopupLoadedStoryBoard" Storyboard="{StaticResource PopupLoaded}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="PopupLoadedStoryBoard"/>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True" SourceName="PART_EditableTextBox">
                            <Setter Property="CaretBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Foreground}" TargetName="PART_EditableTextBox"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <Style x:Key="MultiComboBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=Foreground}"/>
        <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=ActualWidth}"/>
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=ActualHeight}"/>
        <Setter Property="ripple:RippleAssist.Feedback" Value="#FFFFFF" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="ItemBorder" BorderBrush="Transparent"
                            Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.ItemsListBackground)}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="7*" />
                                <ColumnDefinition Width="3*" />
                            </Grid.ColumnDefinitions>
                            <ripple:Ripple ContentTemplate="{TemplateBinding ContentTemplate}" Focusable="False"
                                           ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                           HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                           VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                           Padding="{TemplateBinding Padding}"
                                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                           Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBox},Path=(ripple:RippleAssist.IsDisabled),Converter={toolsConverters:BooleanToVisibilityReConverter}}"/>
                            <TextBlock Grid.Column="0" x:Name="ItemContent" Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Content}"   
                                       Padding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=Padding}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Grid Grid.Column="1" x:Name="ItemGrid" HorizontalAlignment="Right" Margin="0,0,10,0"
                                  Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.ItemControlWidth)}"
                                  Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.ItemControlHeight)}">
                                <CheckBox x:Name="ItemCheckBox" Focusable="True" Width="{Binding ElementName=ItemGrid,Path=Width}" Height="{Binding ElementName=ItemGrid,Path=Height}"
                                          Content="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.CheckBoxContent)}"
                                          IsChecked="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=IsSelected}"
                                          attached:SelectorAttached.IsCheckBoxChecked="True"
                                          Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.SelectorItemType),
                                                      Converter={commonConverters:SelectorItemTypeToVisibilityConverter},ConverterParameter=CheckBox}"/>
                                <Button x:Name="ItemButton" Width="{Binding ElementName=ItemGrid,Path=Width}" Height="{Binding ElementName=ItemGrid,Path=Height}"
                                        Content="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.ButtonContent)}" 
                                        attached:FrameworkElementBaseAttached.CornerRadius="2" Focusable="True" ToolTip="Delete"
                                        attached:SelectorAttached.IsButtonDeleteItem="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.IsButtonDeleteItem)}"
                                        attached:ButtonBaseAttached.ButtonBaseMouseOverBackground="{DynamicResource AssistantForeground}"
                                        attached:ButtonBaseAttached.ButtonBasePressBackground="{DynamicResource AssistantForeground}"
                                        Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.SelectorItemType),
                                                            Converter={commonConverters:SelectorItemTypeToVisibilityConverter},ConverterParameter=Button}"/>
                                <!--Data="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:FrameworkElementBaseAttached.IconGeometry)}"-->
                                <Path x:Name="ItemIcon" Width="{Binding ElementName=ItemGrid,Path=Width}" Height="{Binding ElementName=ItemGrid,Path=Height}" Stretch="Uniform"
                                      Data="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Content.GeometryData}" 
                                      Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.IconFill)}" 
                                      Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.SelectorItemType),
                                                  Converter={commonConverters:SelectorItemTypeToVisibilityConverter},ConverterParameter=Icon}"/>
                                <!--Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.ImageSource)}"-->
                                <!--gif:AnimationBehavior.SourceUri="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.GifSource)}"-->
                                <Image x:Name="ItemImageGif" Width="{Binding ElementName=ItemGrid,Path=Width}" Height="{Binding ElementName=ItemGrid,Path=Height}"
                                       Source="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Content.ImageSource}"
                                       gif:AnimationBehavior.SourceUri="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Content.GifSource}"
                                       attached:SelectorAttached.IsPreviewImage="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.IsPreviewImage)}"
                                       Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.SelectorItemType),
                                                    Converter={commonConverters:SelectorItemTypeToVisibilityConverter},ConverterParameter=Image}"/>
                            </Grid>
                            <Popup x:Name="Popup_PreviewImage" Placement="Right" PopupAnimation="Slide" AllowsTransparency="True">
                                <Image Source="{Binding ElementName=ItemImageGif,Path=Source}" Width="300" Height="300"/>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.SelectorItemType)}" Value="Icon">
                            <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Content.Content}" TargetName="ItemContent"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.SelectorItemType)}" Value="Image">
                            <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Content.Content}" TargetName="ItemContent"/>
                        </DataTrigger>
                        <!--鼠标仅在Image之上时触发-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" SourceName="ItemImageGif"/>
                                <Condition Property="attached:SelectorAttached.IsPreviewImage" Value="True" SourceName="ItemImageGif"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="IsOpen" Value="True" TargetName="Popup_PreviewImage"/>
                        </MultiTrigger>
                        <!--鼠标在整个ListBoxItem之上时触发-->
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.IsPreviewImage)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsOpen" Value="True" TargetName="Popup_PreviewImage"/>
                        </MultiDataTrigger>-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{DynamicResource AssistantForeground}" TargetName="ItemCheckBox"/>
                            <Setter Property="Background" Value="{DynamicResource AssistantForeground}" TargetName="ItemButton"/>
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryColorTheme}" TargetName="ItemButton"/>
                            <Setter Property="Fill" Value="{DynamicResource AssistantForeground}" TargetName="ItemIcon"/>

                            <Setter Property="Foreground" Value="{DynamicResource AssistantForeground}" />
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox},Path=(attached:SelectorAttached.ItemMouseOverBackground)}" TargetName="ItemBorder"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True" SourceName="ItemCheckBox">
                            <Setter Property="BorderThickness" Value="3" TargetName="ItemCheckBox"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--MultiComboBox-->
    <Style x:Key="MultiComboBoxBaseStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource ComboBoxBaseStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="PopupLoaded">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="PopupBorder">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" Storyboard.TargetName="PopupBorder">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Border x:Name="PART_Border" SnapsToDevicePixels="True" Cursor="{TemplateBinding Cursor}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" CornerRadius="{TemplateBinding attached:FrameworkElementBaseAttached.CornerRadius}">
                        <Grid x:Name="RootGrid" SnapsToDevicePixels="True" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock x:Name="PART_PlaceHolder" Text="{TemplateBinding attached:TextElementAttached.PlaceHolder}" 
                                       Foreground="{TemplateBinding attached:TextElementAttached.PlaceHolderBrush}"
                                       TextAlignment="Left" FontSize="{TemplateBinding FontSize}" Padding="{TemplateBinding Padding}"
                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            <TextBox x:Name="PART_EditableTextBox" Style="{StaticResource ComboBoxEditableTextBox}"
                                     Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Text,Mode=TwoWay}"
                                     IsHitTestVisible="{TemplateBinding IsEditable}" IsReadOnly="{TemplateBinding IsReadOnly}" Padding="{TemplateBinding Padding}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <WrapPanel Grid.Column="1" Orientation="Horizontal"
                                       HorizontalAlignment="Right" VerticalAlignment="Center">
                                <Button x:Name="PART_ClearButton" Effect="{x:Null}" ToolTip="Clear"
                                        Style="{DynamicResource ButtonTransparentIconStyle}"
                                        attached:FrameworkElementBaseAttached.IconWidth="{TemplateBinding attached:FrameworkElementBaseAttached.IconWidth}"
                                        attached:FrameworkElementBaseAttached.IconHeight="{TemplateBinding attached:FrameworkElementBaseAttached.IconHeight}"
                                        attached:FrameworkElementBaseAttached.IconGeometry="{DynamicResource CloseCircleGeometry}"
                                        Margin="{TemplateBinding attached:FrameworkElementBaseAttached.IconMargin}"
                                        Foreground="{DynamicResource PrimaryColorTheme}" Background="Transparent" BorderThickness="0">
                                    <Button.Visibility>
                                        <MultiBinding Converter="{commonConverters:TextFieldClearButtonVisibilityConverter}">
                                            <Binding RelativeSource="{RelativeSource Mode=TemplatedParent}" Path="(attached:TextElementAttached.IsAddClearButton)"/>
                                            <Binding RelativeSource="{RelativeSource Mode=TemplatedParent}" Path="Text"/>
                                        </MultiBinding>
                                    </Button.Visibility>
                                </Button>
                                <ToggleButton Style="{StaticResource DropDownToggleButtonStyle}"
                                              Focusable="False" HorizontalAlignment="Right" Margin="8,0"
                                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                            </WrapPanel>
                            <Popup x:Name="PART_Popup" IsOpen="{TemplateBinding IsDropDownOpen}" PopupAnimation="Slide" Placement="Bottom"
                                   HorizontalOffset="-1" VerticalOffset="0" AllowsTransparency="True">
                                <Border x:Name="PopupBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"                                            
                                        Width="{Binding ElementName=PART_Border,Path=ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                        Margin="1" Effect="{TemplateBinding assistant:ComboBoxAssistant.ComboBoxPopupListShadow}">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="0" ScaleY="0"/>
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                    <!--ItemsSource="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Items}"-->
                                    <ListBox x:Name="PART_ListBox" Width="{TemplateBinding Width}" MaxHeight="{TemplateBinding MaxDropDownHeight}"                                            
                                             HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                             VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"                              
                                             SelectionMode="Extended" BorderThickness="0" ScrollViewer.HorizontalScrollBarVisibility="Hidden"
                                             ItemContainerStyle="{StaticResource MultiComboBoxItemStyle}" ItemTemplate="{TemplateBinding ItemTemplate}"/>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self},Path=Text,Converter={toolsConverters:ValueIsEmptyOrNullConverter}}" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_PlaceHolder"/>
                        </DataTrigger>
                        <Trigger Property="IsDropDownOpen" Value="true">
                            <Setter Property="attached:FrameworkElementBaseAttached.CornerRadius" Value="2,2,0,0"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard x:Name="PopupLoadedStoryBoard" Storyboard="{StaticResource PopupLoaded}"/>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <RemoveStoryboard BeginStoryboardName="PopupLoadedStoryBoard"/>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True" SourceName="PART_EditableTextBox">
                            <Setter Property="CaretBrush" Value="{Binding RelativeSource={RelativeSource Self},Path=Foreground}" TargetName="PART_EditableTextBox"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>