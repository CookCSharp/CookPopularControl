<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:common="clr-namespace:CookPopularControl.Communal"
                    xmlns:pc="clr-namespace:CookPopularControl.Controls"
                    xmlns:pt="https://Chance.CookPopularCSharpToolkit/2021/xaml">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/CookPopularControl;component/Themes/BaseStyle/ControlBaseStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <pc:SelectorItemTypeToVisibilityConverter x:Key="SelectorItemTypeToVisibilityConverter" />

    <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource InputControlBaseStyle}">
        <Setter Property="Width" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.ItemWidth)}" />
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.ItemHeight)}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <pc:SimpleGrid x:Name="ItemContent" Background="{TemplateBinding Background}">
                        <pc:Ripple Background="{TemplateBinding Background}"
                                   ContentTemplate="{TemplateBinding ContentTemplate}"
                                   ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                   Padding="{TemplateBinding Padding}"
                                   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                   Focusable="False"
                                   HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Feedback="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(pc:RippleAssist.Feedback)}"
                                   Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(pc:RippleAssist.IsDisabled), Converter={pt:BooleanToVisibilityReConverter}}" />
                        <ContentPresenter Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                          ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                          Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          IsHitTestVisible="False"
                                          TextElement.Foreground="{TemplateBinding Foreground}" />
                    </pc:SimpleGrid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundBrush}" />
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.ItemMouseOverBackground)}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundBrush}" />
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.ItemSelectedBackground)}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.ItemSelectedBackground)}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MultiListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ListBoxItemStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="ItemBorder" Background="{TemplateBinding Background}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <pc:Ripple Grid.ColumnSpan="2"
                                       Background="Transparent"
                                       ContentTemplate="{TemplateBinding ContentTemplate}"
                                       ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                       Padding="{TemplateBinding Padding}"
                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                       Focusable="False"
                                       HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                       VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                       Feedback="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(pc:RippleAssist.Feedback)}"
                                       Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(pc:RippleAssist.IsDisabled), Converter={pt:BooleanToVisibilityReConverter}}" />
                            <ContentPresenter x:Name="ItemContent" Grid.Column="0"
                                              Content="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              IsHitTestVisible="False"
                                              TextElement.Foreground="{TemplateBinding Foreground}" />
                            <pc:SimpleGrid x:Name="ItemGrid" Grid.Column="1"
                                           Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.ItemControlWidth)}"
                                           Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.ItemControlHeight)}"
                                           Margin="6,0"
                                           HorizontalAlignment="Center" VerticalAlignment="Center">
                                <CheckBox x:Name="ItemCheckBox"
                                          Width="{Binding ElementName=ItemGrid, Path=ActualWidth}"
                                          Height="{Binding ElementName=ItemGrid, Path=ActualHeight}"
                                          Content="{TemplateBinding common:SelectorAttached.CheckBoxContent}"
                                          IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsSelected, Mode=TwoWay}"
                                          Margin="{Binding ElementName=ItemGrid, Path=ActualHeight, Converter={pt:DoubleToLeftRightThicknessConverter}, ConverterParameter=0.15}"
                                          Padding="0" Focusable="False"
                                          pc:CheckBoxAssistant.FillBrush="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(pc:CheckBoxAssistant.FillBrush)}"
                                          Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.SelectorItemType), Converter={StaticResource SelectorItemTypeToVisibilityConverter}, ConverterParameter={x:Static common:SelectorItemType.CheckBox}}" />
                                <Button x:Name="ItemButton"
                                        Width="{Binding ElementName=ItemGrid, Path=ActualWidth}"
                                        Height="{Binding ElementName=ItemGrid, Path=ActualHeight}"
                                        Content="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.ButtonContent)}"
                                        Focusable="True"
                                        common:FrameworkElementBaseAttached.CornerRadius="2"
                                        common:SelectorAttached.IsButtonDeleteItem="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.IsButtonDeleteItem)}"
                                        Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.SelectorItemType), Converter={StaticResource SelectorItemTypeToVisibilityConverter}, ConverterParameter={x:Static common:SelectorItemType.Button}}" />
                                <Path x:Name="ItemIcon"
                                      Width="{Binding ElementName=ItemGrid, Path=ActualWidth}"
                                      Height="{Binding ElementName=ItemGrid, Path=ActualHeight}"
                                      Data="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.GeometryData}"
                                      Fill="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.IconFill)}"
                                      Stretch="Uniform"
                                      Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.SelectorItemType), Converter={StaticResource SelectorItemTypeToVisibilityConverter}, ConverterParameter={x:Static common:SelectorItemType.Icon}}" />
                                <pc:Gif x:Name="ItemImageGif"
                                        Width="{Binding ElementName=ItemGrid, Path=ActualWidth}"
                                        Height="{Binding ElementName=ItemGrid, Path=ActualHeight}"
                                        Source="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.ImageSource}"
                                        GifSource="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.GifSource}"
                                        common:SelectorAttached.IsPreviewImageGif="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.IsPreviewImageGif)}"
                                        Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.SelectorItemType), Converter={StaticResource SelectorItemTypeToVisibilityConverter}, ConverterParameter={x:Static common:SelectorItemType.ImageGif}}" />
                            </pc:SimpleGrid>
                            <Popup x:Name="Popup_PreviewImageGif"
                                   AllowsTransparency="True" IsOpen="False" Placement="Right"
                                   PopupAnimation="Slide">
                                <pc:SimpleGrid>
                                    <Image Width="300" Height="300" Source="{Binding ElementName=ItemImageGif, Path=Source}" />
                                    <pc:Gif Width="300" Height="300" GifSource="{Binding ElementName=ItemImageGif, Path=GifSource}" />
                                </pc:SimpleGrid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.SelectorItemType)}" Value="Default">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="ItemGrid" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.SelectorItemType)}" Value="Icon">
                            <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.Content}" TargetName="ItemContent" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.SelectorItemType)}" Value="ImageGif">
                            <Setter Property="Content" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content.Content}" TargetName="ItemContent" />
                        </DataTrigger>
                        <!--  鼠标仅在ImageGif之上时触发  -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" SourceName="ItemImageGif" />
                                <Condition Property="common:SelectorAttached.IsPreviewImageGif" Value="True" SourceName="ItemImageGif" />
                            </MultiTrigger.Conditions>
                            <Setter Property="IsOpen" Value="True" TargetName="Popup_PreviewImageGif" />
                        </MultiTrigger>
                        <!--  鼠标在整个ListBoxItem之上时触发  -->
                        <!--<MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self},Path=IsMouseOver}" Value="True" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=Selector},Path=(common:SelectorAttached.IsPreviewImageGif)}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsOpen" Value="True" TargetName="Popup_PreviewImage"/>
                        </MultiDataTrigger>-->
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundBrush}" />
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.ItemMouseOverBackground)}" TargetName="ItemBorder" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource ControlForegroundBrush}" />
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.ItemSelectedBackground)}" TargetName="ItemBorder" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="IsMouseOver" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Opacity" Value="1.0" TargetName="ItemBorder" />
                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Selector}}, Path=(common:SelectorAttached.ItemSelectedBackground)}" TargetName="ItemBorder" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ListBoxBaseStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource ControlBaseStyle}">
        <Setter Property="Background" Value="{DynamicResource SystemBackgroundBursh}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemStyle}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="ScrollViewer.PanningRatio" Value="2" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.CacheLengthUnit" Value="Item" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="pc:RippleAssist.IsDisabled" Value="False" />
        <Setter Property="pc:RippleAssist.Feedback" Value="{DynamicResource RippleFeedback}" />
        <Setter Property="pc:ScrollBarAssistant.IsShowScrollBarRepeatButton" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="{TemplateBinding common:FrameworkElementBaseAttached.CornerRadius}">
                        <ScrollViewer Focusable="False"
                                      CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                                      HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                      VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                      pc:ScrollBarAssistant.HorizontalScrollBarHeight="{TemplateBinding pc:ScrollBarAssistant.HorizontalScrollBarHeight}"
                                      pc:ScrollBarAssistant.IsShowScrollBarRepeatButton="{TemplateBinding pc:ScrollBarAssistant.IsShowScrollBarRepeatButton}"
                                      pc:ScrollBarAssistant.VerticalScrollBarWidth="{TemplateBinding pc:ScrollBarAssistant.VerticalScrollBarWidth}">
                            <!--<StackPanel x:Name="ItemsPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" IsItemsHost="True" />-->
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="True" />
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>